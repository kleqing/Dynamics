@using Microsoft.AspNetCore.Http
@using Newtonsoft.Json
@using Microsoft.AspNetCore.Authorization
@inject IHttpContextAccessor Accessor
@inject IProjectMemberRepository ProjectMemberRepository
@model Dynamics.Models.Models.ViewModel.DetailProjectVM
@{
    ViewData["Title"] = "Manage Project";
    Layout = "~/Views/Shared/_LayoutProject.cshtml";
    // take current user
    var userIDString = Accessor.HttpContext.Session.GetString("currentUserID");
    var currentProjectID = Accessor.HttpContext.Session.GetString("currentProjectID");
    var allProjectMember = ProjectMemberRepository.FilterProjectMember(p => p.ProjectID.Equals(new Guid(currentProjectID)));

    Report report = new Report();
    List<ProjectMember> ProjectMemberOfUser = null;
    int? statusProjectMemberOfUser = -1;

    if (!string.IsNullOrEmpty(userIDString))
    {    
        ProjectMemberOfUser = ProjectMemberRepository.FilterProjectMember(p => p.ProjectID.Equals(new Guid(currentProjectID)) && p.UserID.Equals(new Guid(userIDString)));
        if (ProjectMemberOfUser.Count()>0)
        {
            statusProjectMemberOfUser = ProjectMemberOfUser?.FirstOrDefault()?.Status;
        }
    }
         
   
    string[] projectImages = new string[1] { ","};
    if (Model.CurrentProject.Attachment != null)
    {
        projectImages = Model.CurrentProject.Attachment.TrimEnd(',', ' ').Split(",");
    }
    
}

<!-- container start -->
<div class="mx-auto max-w-screen-xl flex justify-start relative">
    @if (statusProjectMemberOfUser>=2)
    {
        <!-- edit button -->
        <a asp-action="UpdateProjectProfile" asp-route-id="@Model.CurrentProject.ProjectID" title="Edit project profile">
            <button type="button"
            class="absolute  w-fit h-fit mx-2  p-2 top-2 " style="right:-5px;">
                <i class="fa-solid fa-pen-to-square text-3xl text-gray-900"></i>
            </button>
        </a>
    }
    <div class="relative my-12 flex flex-col " style="width: 66%">
        <!-- part 1-image -->
        <div class="ml-0  w-full justify-center items-center">
            <div class="relative items-center">
                <!-- Main image container -->
                <div id="carousel" class="w-full bg-gray-200 rounded-lg overflow-hidden" style="height:32rem;">
                    <!-- Images will be inserted here by JavaScript -->
                </div>
            </div>
            <div class="flex justify-between items-center gap-12 px-4 py-6 w-full relative">
                <button id="prevBtn"
                        class="bg-white rounded-full p-2 shadow-md opacity-80 hover:opacity-100">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                         xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7">
                        </path>
                    </svg>
                </button>
                <div class="flex justify-center gap-2">
                    @foreach (var img in projectImages)
                    {
                        <div onclick="updateCarouselAsUserWant('@img')" class="relative w-20 h-20 bg-gray-300 rounded-xl mr-2 hover:ring-4 hover:ring-blue-500 cursor-pointer">
                            <img src="@img" class="w-full h-full items-center rounded-xl object-cover carouselImg">
                        </div>
                    }
                </div>
                <button id="nextBtn"
                        class="bg-white rounded-full p-2 shadow-md opacity-80 hover:opacity-100">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                         xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7">
                        </path>
                    </svg>
                </button>
            </div>
        </div>
        <!-- end part 1-image -->
        <div class="border-t p-6 ">
            <h2 class="font-semibold mb-2 text-black text-md">Contact Information:</h2>
            <p class="text-gray-600  text-sm flex gap-x-2 items-end">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M2.25 13.5h3.86a2.25 2.25 0 0 1 2.012 1.244l.256.512a2.25 2.25 0 0 0 2.013 1.244h3.218a2.25 2.25 0 0 0 2.013-1.244l.256-.512a2.25 2.25 0 0 1 2.013-1.244h3.859m-19.5.338V18a2.25 2.25 0 0 0 2.25 2.25h15A2.25 2.25 0 0 0 21.75 18v-4.162c0-.224-.034-.447-.1-.661L19.24 5.338a2.25 2.25 0 0 0-2.15-1.588H6.911a2.25 2.25 0 0 0-2.15 1.588L2.35 13.177a2.25 2.25 0 0 0-.1.661Z" />
                </svg>
                @Model.CurrentProject.ProjectEmail
            </p>
            <p class="text-gray-600  text-sm flex gap-x-2 items-end">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M2.25 6.75c0 8.284 6.716 15 15 15h2.25a2.25 2.25 0 0 0 2.25-2.25v-1.372c0-.516-.351-.966-.852-1.091l-4.423-1.106c-.44-.11-.902.055-1.173.417l-.97 1.293c-.282.376-.769.542-1.21.38a12.035 12.035 0 0 1-7.143-7.143c-.162-.441.004-.928.38-1.21l1.293-.97c.363-.271.527-.734.417-1.173L6.963 3.102a1.125 1.125 0 0 0-1.091-.852H4.5A2.25 2.25 0 0 0 2.25 4.5v2.25Z" />
                </svg> @Model.CurrentProject.ProjectPhoneNumber
            </p>
            <p class="text-gray-600  text-sm flex gap-x-2 items-end ">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                    <path stroke-linecap="round" stroke-linejoin="round" d="m2.25 12 8.954-8.955c.44-.439 1.152-.439 1.591 0L21.75 12M4.5 9.75v10.125c0 .621.504 1.125 1.125 1.125H9.75v-4.875c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21h4.125c.621 0 1.125-.504 1.125-1.125V9.75M8.25 21h8.25" />
                </svg>
                @Model.CurrentProject.ProjectAddress
            </p>
        </div>
            <div class="border-t p-4 mt-0">
                <h2 class="font-semibold mb-2 text-black text-md">Timeline</h2>
                <p class="text-gray-600  text-sm">Start Date: @Model.CurrentProject.StartTime</p>
                <p class="text-gray-600  text-sm">End Date: @Model.CurrentProject.EndTime</p>
            @if (Model.CurrentProject.ProjectStatus == -1)
                    {
                    <p class="text-gray-600  text-sm">Status: <span class="text-red-700 font-semibold">Inactive</span></p>
                    }else if
                
                (Model.CurrentProject.ProjectStatus== 0)
                {
                <p class="text-gray-600  text-sm">Status: <span class="text-red-700 font-semibold">Preparing</span></p>
            }
            else if(Model.CurrentProject.ProjectStatus==1)
            {
                <p class="text-gray-600  text-sm">Status: <span class="text-red-700 font-semibold">In progress</span></p>
            }
            else if (Model.CurrentProject.ProjectStatus == 2)
            {
                <p class="text-gray-600  text-sm">Status: <span class="text-red-700 font-semibold">Completed</span></p>
                }
            </div>
        <div class="border-t p-4 mt-0">
            <h2 class="font-semibold mb-2 text-black text-md">Description</h2>

            <details id="descriptionDetails" class="collapse bg-gray-200" style="border-radius:5px;">
            <summary  class="collapse-title text-sm font-medium cursor-pointer">
                <div id="description-container" class="cursor-pointer" onclick="toggleDescription()">
                <p class="text-gray-600 text-sm line-clamp-3" id="summaryText">
                    @Model.CurrentProject.ProjectDescription
                </p>
                <p class="hidden" id="fullText">
                    @Model.CurrentProject.ProjectDescription
                </p>
                </div>
            </summary>
        </details>
        </div>
        <div class="border-t p-4 mt-0">
            <h2 class="font-semibold mb-2 text-black text-md">Organizer</h2>
            <div class="flex justify-start">
                <div>
                    <img class="rounded-full w-14 h-14 mx-4 mb-4 object-cover"
                             src="@Model.CurrentLeaderProject.UserAvatar"
                         alt="avatar">
                </div>
                <div class="flex flex-col ">
                    <p class="text-gray-600 font-normal">
                        Project leader: 
                        <a asp-controller="User" asp-action="Index" asp-route-username="@Model.CurrentLeaderProject.UserName" class="text-black font-bold text-sm cursor-pointer hover:underline">
                           @Model.CurrentLeaderProject.UserName
                        </a>
                    </p>
                        <p class="text-gray-400 font-normal  text-sm ">Address: @Model.CurrentLeaderProject.UserAddress</p>
                </div>
            </div>
            @if (Model.CurrentProject.Request != null)
            {
                <div class="flex justify-start">
                    <div>
                        <img class="rounded-full w-14 h-14 mx-4 mb-4"
                             src="@Model.CurrentProject.Request?.User.UserAvatar"
                             alt="avatar">
                    </div>
                    <div class="flex flex-col ">
                        <p class="text-gray-600 font-normal">
                            Requester: <span class="text-black font-bold  text-sm">
                                @Model.CurrentProject.Request?.User.UserName
                            </span>
                        </p>
                        <p class="text-gray-400 font-normal  text-sm ">Address: @Model.CurrentProject.Request?.User.UserAddress</p>
                    </div>
                </div>
            }          
        </div>
        @if (Model.Random5Donors.Count > 0)
        {
            <div class="border-t p-4 mt-0">
                <h2 class="font-semibold mb-2 text-black text-md">Donors</h2>
        <div class="overflow-x-auto">
            <table class="table table-sm">
                <thead class="bg-gray-300/20 ">
                    <tr class="text-gray-900 ">
                        <th></th>
                        <th class="text-md">Date</th>
                        <th class="text-md">Name</th>
                        <th class="text-md">Resource</th>
                        <th class="text-md">Quantity</th>
                        <th class="text-md">Unit</th>
                        <th class="text-md">Message</th>
                        <th class="text-md">Status</th>
                                <th class="text-md">Action</th>
                    </tr>
                </thead>
                <tbody >
                       @for (int i = 0;i< Model.Random5Donors.Count();i++)
                    {
                        var item =  Model.Random5Donors.ElementAt(i);
                        <tr class="hover:bg-slate-50">
                            <td class=" text-sm">@(i + 1)</td>
                            <td class=" text-sm">@item.Time</td>
                            <td class=" text-sm">@item.User.UserName</td>
                            <td class=" text-sm">@item.ProjectResource.ResourceName</td>
                            <td class=" text-sm">@item.Amount.ToString("N0")</td>
                            <td class=" text-sm">@item.ProjectResource.Unit</td>
                            <td class=" text-sm">@item.Message</td>
                            <td class=" ">
                                <div class="w-fit">
                                        @if (item.Status == 1)
                                        {
                                        <div class="relative grid items-center px-2 py-1 font-sans font-bold text-green-900 text-xs uppercase rounded-md select-none whitespace-nowrap bg-green-500/20">

                                                <span class="">Accepted</span>
                                        </div>

                                        }else if(item.Status == -1)
                                        {
                                        <div class="relative grid items-center px-2 py-1 font-sans font-bold text-red-900 text-xs uppercase rounded-md select-none whitespace-nowrap bg-red-500/20">
                                            <span class="">Denied</span>
                                        </div>
                                        }
                                </div>
                            </td>
                            <td>
                                <button type="button" onClick="document.getElementById('proofImagesModal_@item.TransactionID').showModal()" class="py-2 px-4 border border-solid border-gray-300 shadow-sm rounded-md m-1 bg-gray-100 text-black font-bold">Images</button>
                                <!-- You can open the modal using ID.showModal() method -->
                                <dialog id="proofImagesModal_@item.TransactionID" class="modal">
                                    <div class="modal-box w-11/12 max-w-5xl">
                                        <h2 class=" text-black font-bold text-sm text-center mb-4">Proof images</h2>
                                        @{
                                            string[] proofImages = new string[1] { "," };
                                            if (item.Attachments != null)
                                            {
                                                proofImages = item.Attachments.TrimEnd(',', ' ').Split(",");
                                            }
                                        }
                                        <div class="flex flex-wrap items-start gap-6" style="height:50vh;">
                                            @foreach (var img in proofImages)
                                            {
                                                <button onclick="openModal('@img','proof_image')">
                                                    <img src="@img" alt="proof-img" class="h-40 w-40 rounded-xl shadow-md cursor-pointer" />
                                                </button>
                                                <dialog id="proof_image" class="modal">
                                                    <div class="modal-box w-fit h-fit  p-0 m-0" style=" background-color: rgba(0, 0, 0, 0);">
                                                        <img id="modalImage" alt="current-phase-img" class="h-[80vh] w-auto rounded-xl shadow-md cursor-pointer" />
                                                    </div>
                                                    <form method="dialog" class="modal-backdrop ">
                                                        <button>close</button>
                                                    </form>
                                                </dialog>
                                            }
                                        </div>

                                    </div>
                                    <form method="dialog" class="modal-backdrop">
                                        <button>close</button>
                                    </form>
                                </dialog>
                            </td>
                    </tr>
        }
                </tbody>
            </table>
        </div>

                <a asp-action="ManageProjectDonor" asp-route-projectID="@currentProjectID" class="text-gray-400 flex justify-center font-normal">See more donors...</a>
              </div>
        }       

</div>
    <!-- part 1-fundraising -->
    <!-- when using fixed+relative, need to modify top-bottom-left-right to specify the object at fixed/absolute -->
        <div  class="sticky top-20 right-15 h-fit ml-12 mr-12 " style="width:28%;">
    <div class=" flex flex-col gap-2 justify-start shadow-2xl p-6 my-10 mx-2 rounded-3xl bg-white w-full">
        <span class="font-bold text-success text-center text-2xl">@Model.CurrentAmountOfMoneyDonate.ToString("N0") VND</span>
        <span class=" font-normal text-neutral text-center mb-2">
            raised of <span class="font-bold">@Model.ExpectedAmountOfMoneyDonate.ToString("N0")</span> VND goal
        </span>
        <div class="flex flex-col">
            <div class="w-full bg-neutral rounded-full h-3">
                <div class="bg-green-500 h-3 rounded-full" style="width: @(Model.ProgressDonate >=100?100:Model.ProgressDonate)%"></div>
            </div>
            <div class="w-full flex justify-between">
                <span class="text-success">@(Model.ProgressDonate.ToString("F2"))% funded</span>
                <span class="text-neutral">@Model.NumberOfProjectContributor contributors</span>
            </div>
        </div>
        <span class="hidden" id="daysLeft">@Model.TimeLeftEndDay</span>
        <div class="flex font-normal bg-gray-300/30 rounded px-6 py-4 gap-6 justify-center timeLeftContainer">
            <div class="flex flex-col justify-center">
                <svg class="w-8 h-8" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"/>
                </svg>
            </div>
            <div>
                <p>Time left</p>
                <p class="timeLeftContainer__time"><span class="font-bold" id="d"></span> d <span class="font-bold" id="h"></span> h <span class="font-bold" id="m"></span> m</p>
            </div>
        </div>
        <a asp-action="SendDonateRequest" asp-route-projectid="@currentProjectID" asp-route-donor="User">
                <button type="button" style="width:100%;"
                class="text-white hover:text-black bg-success transition-all ease-in duration-75 hover:bg-gradient-to-l hover:from-teal-200 hover:to-lime-200 focus:ring-4 font-medium rounded-lg text-sm btn btn-success btn-lg text-center me-2 mb-2">
                Donate this project
        </button>
            </a>
            @if (statusProjectMemberOfUser == -1)
            {
                <a asp-action="JoinProjectRequest" asp-route-memberid="@(!string.IsNullOrEmpty(userIDString)?new Guid(userIDString):Guid.Empty)" asp-route-projectid="@currentProjectID">
                    <button style="width:100%;" class=" relative inline-flex items-center justify-center p-0.5 mb-2 me-2 overflow-hidden text-sm font-medium text-gray-900 rounded-lg group bg-gradient-to-br from-green-400 to-blue-600 group-hover:from-green-400 group-hover:to-blue-600 hover:text-white focus:ring-4 focus:outline-none focus:ring-green-200 dark:focus:ring-green-800">
                        <span class="relative w-full px-5 py-2.5  transition-all ease-in duration-75 bg-white rounded-md group-hover:bg-opacity-0">
                        Join this project
                    </span>
                </button>
                </a>
            }
            else if (statusProjectMemberOfUser == 0)
            {
                <a asp-action="JoinProjectRequest" asp-route-memberid="@(new Guid(userIDString))" asp-route-projectid="@currentProjectID">
                    <button style="width:100%;" class=" relative inline-flex items-center justify-center p-0.5 mb-2 me-2 overflow-hidden text-sm font-medium text-gray-900 rounded-lg group bg-gradient-to-br from-green-400 to-blue-600 group-hover:from-green-400 group-hover:to-blue-600 hover:text-white focus:ring-4 focus:outline-none focus:ring-green-200 dark:focus:ring-green-800">
                        <span class=" relative w-full px-5 py-2.5  transition-all ease-in duration-75 bg-white rounded-md group-hover:bg-opacity-0">
                            Processing join request
                        </span>
                    </button>
                </a>           
            }
            else if (statusProjectMemberOfUser == -2)
            {
                <a asp-action="AcceptJoinInvitation" asp-route-memberid="@(new Guid(userIDString))" asp-route-projectid="@currentProjectID">
                    <button style="width:100%;" class=" relative inline-flex items-center justify-center p-0.5 mb-2 me-2 overflow-hidden text-sm font-medium text-gray-900 rounded-lg group bg-gradient-to-br from-green-400 to-blue-600 group-hover:from-green-400 group-hover:to-blue-600 hover:text-white focus:ring-4 focus:outline-none focus:ring-green-200 dark:focus:ring-green-800">
                        <span class=" relative w-full px-5 py-2.5  transition-all ease-in duration-75 bg-white rounded-md group-hover:bg-opacity-0">
                            Accept invitation
                        </span>
                    </button>
                </a>
            }
            else if (statusProjectMemberOfUser >= 1)
            {
                <a asp-action="LeaveProjectRequest" asp-route-memberid="@(new Guid(userIDString))" asp-route-projectid="@currentProjectID">
                    <button style="width:100%;"class="  relative inline-flex items-center justify-center p-0.5 mb-2 me-2 overflow-hidden text-sm font-medium text-gray-900 rounded-lg group bg-gradient-to-br from-green-400 to-blue-600 group-hover:from-green-400 group-hover:to-blue-600 hover:text-white focus:ring-4 focus:outline-none focus:ring-green-200 dark:focus:ring-green-800">
                        <span class="relative w-full px-5 py-2.5 transition-all ease-in duration-75 bg-white rounded-md group-hover:bg-opacity-0">
                            Leave this project
                        </span>
                    </button>
                </a>
            }

            <button onclick="@(User.Identity.IsAuthenticated ? "ReportModal.showModal()" : $"window.location.href='/Identity/Account/Login?returnUrl={Uri.EscapeDataString($"~/Project/ManageProject?id={currentProjectID}")}'")" type="button" class="relative inline-flex items-center justify-center p-0.5 mb-2 me-2 overflow-hidden text-sm font-medium text-gray-900 rounded-lg group bg-gradient-to-br from-pink-500 to-orange-400 group-hover:from-pink-500 group-hover:to-orange-400 hover:text-white focus:ring-4 focus:outline-none focus:ring-pink-200 dark:focus:ring-pink-800 w-full">
                <span class="relative w-full px-5 py-2.5 transition-all ease-in duration-75 bg-white rounded-md group-hover:bg-opacity-0">
                Report
            </span>
        </button>

    </div>
   
        </div>
        @* alternative form *@
    <!-- Open the modal using ID.showModal() method -->

    <dialog id="ReportModal" class="modal modal-bottom sm:modal-middle">
        <div class="modal-box">
            <div class="modal-action  flex flex-col">
                <h2 class="font-serif text-black font-bold text-md text-center mb-4">Report project</h2>
                <form method="post" asp-action="SendReportProjectRequest" asp-controller="Project">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <input type="hidden" asp-for="@report.ObjectID" value="@currentProjectID" />
                    <div class="grid grid-cols-1 gap-y-3">
                        <div>
                            <label asp-for="@report.Reason" class="block mb-2 text-sm font-medium text-gray-900">Enter reason to report project</label>
                            <textarea asp-for="@report.Reason" id="Reason" rows="4" class="block p-2.5 w-full text-sm text-gray-900 bg-white bg-opacity-70 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 " placeholder="Write reason here..."></textarea>
                            <span asp-validation-for="@report.Reason" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="flex justify-center items-center gap-x-6">
                        <button type="submit"
                                class="mt-4 text-sm text-white bg-red-500 hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-bold rounded-lg w-full sm:w-auto px-5 py-2.5 text-center">
                            Report
                        </button>
                    </div>
                </form>
            </div>
        </div>
        <form method="dialog" class="modal-backdrop">
                                        <button>close</button>
                                    </form>
    </dialog>


</div>
<!-- Display the countdown timer in an element -->
<script>
    let remainingTime = document.querySelector('#daysLeft');
    let days = (Number)(remainingTime.innerText);
    console.log('Days: '  + days);
    if (days === 0 || isNaN(days) || days <= 0) {
        let container = document.getElementsByClassName("timeLeftContainer")[0];
        container.style.display = "none";
    } else {
        let now = new Date().getTime();
        let midnight = new Date();
        midnight.setHours(0, 0, 0, 0);
        let timeSinceMidnight = now - midnight.getTime();
        let countDownDate = now + (days * 24 * 60 * 60 * 1000) - timeSinceMidnight; // Current time + total days - time passed since 24:00
        console.log(countDownDate)
        let countDown = function () {
            // Get today's date and time
            now = new Date().getTime();
            // Find the distance between now and the count down date
            let distance = countDownDate - now;

            // Time calculations for days, hours, minutes and seconds
            let days = Math.floor(distance / (1000 * 60 * 60 * 24));
            let hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            let minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            let seconds = Math.floor((distance % (1000 * 60)) / 1000);
            console.log('Countdown')
            console.log(days)
            console.log(hours)
            console.log(minutes)
            
            // Stop the countdown if the countdown is over
            if (distance <= 0) {
                clearInterval(x); // Stop the interval
                let container = document.getElementsByClassName("timeLeftContainer")[0];
                container.style.display = "none";
            }
            
            document.getElementsByClassName("timeLeftContainer__time")[0].innerHTML =
                `<span class="font-bold" id="d">${days}</span> d <span class="font-bold" id="h">${hours}</span> h <span class="font-bold" id="m">${minutes}</span> m`
        }
        countDown(); // call first
        // Update the count down every 60 second
        let x = setInterval(countDown, (5000));
    }
</script>

<script>
    @*  modal *@
     function openModal(imgSrc,modalid) {
        document.getElementById('modalImage').src = imgSrc;
        document.getElementById(modalid).showModal();
    }
       

    @* handle carousel *@
    const carousel = document.getElementById('carousel');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const images = @Html.Raw(Json.Serialize(projectImages));

    let currentIndex = 0;

    function updateCarouselAsUserWant(src) {
        // Update the carousel with the selected image
        carousel.innerHTML = `<img src="${src}" class="w-full object-contain items-center cursor-pointer" alt="Project image" style="height: 32rem;">`;

        const srcFilename = src.split('/').pop(); // Get the file name from the src
        const indicators = document.querySelectorAll('.carouselImg');

        // Loop through each indicator to compare its src with the selected image src
        indicators.forEach((indicator) => {
            const indicatorFilename = indicator.src.split('/').pop(); // Get the file name from the indicator src

            // Compare the filenames of the indicator's img and the selected image
            if (indicatorFilename === srcFilename) {
                // Apply special class to highlight the current image (e.g., a mask or border)
                indicator.classList.add('ring-4', 'ring-blue-500');
            } else {
                // Remove the highlight from other images
                indicator.classList.remove('ring-4', 'ring-blue-500');
            }
        });
    }
    function updateCarousel() {
        carousel.innerHTML = `<img src="${images[currentIndex]}" class="w-full object-contain items-center" alt="Project image" style="height: 32rem;">`;
        updateIndicators();
    }

    function updateIndicators() {
        // Select all the image indicators
        const indicators = document.querySelectorAll('.flex.justify-center.mt-4.space-x-2 > div > img');
        indicators.forEach((indicator, index) => {
            if (index === currentIndex) {
                // Apply special class to highlight the current image (e.g., a mask or border)
                indicator.classList.add('ring-4', 'ring-blue-500');
            } else {
                // Remove the highlight from other images
                indicator.classList.remove('ring-4', 'ring-blue-500');
            }
        });
    }

    prevBtn.addEventListener('click', () => {
        currentIndex = (currentIndex - 1 + images.length) % images.length;
        updateCarousel();
    });

    nextBtn.addEventListener('click', () => {
        currentIndex = (currentIndex + 1) % images.length;
        updateCarousel();
    });

    // Initialize the carousel
    updateCarousel();
    @* view more RTCSessionDescription *@


function toggleDescription() {
    const summaryText = document.getElementById('summaryText');
    const fullText = document.getElementById('fullText').textContent;

    if (summaryText.classList.contains('line-clamp-3')) {
        // Hiển thị toàn bộ nội dung
        summaryText.classList.remove('line-clamp-3');
        summaryText.textContent = fullText;
    } else {
        // Thu gọn nội dung
        summaryText.classList.add('line-clamp-3');
        summaryText.textContent = fullText;
    }
}
</script>