@using Dynamics.Utility
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Http.Extensions
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using Newtonsoft.Json
@inject IHttpContextAccessor Accessor
@inject IProjectMemberRepository ProjectMemberRepository
@inject IOrganizationRepository OrganizationRepository
@inject IUserRepository UserRepository
@model Dynamics.Models.Models.ViewModel.SendDonateRequestVM

@{
    ViewData["Title"] = "Donation Page";
    Layout = "~/Views/Shared/_LayoutProject.cshtml";
    var currentProjectID = Accessor.HttpContext.Session.GetString("currentProjectID");
    var currentProjectLeaderID = Accessor.HttpContext.Session.GetString("currentProjectLeaderID");
    var userString = Accessor.HttpContext.Session.GetString("user");
    User currentUser = null;
    if (userString != null)
    {
        currentUser = JsonConvert.DeserializeObject<User>(userString);
    }

    var organizationUserLead = await OrganizationRepository.GetOrganizationUserLead(currentUser.Id);
    var ProjectMemberOfUser = ProjectMemberRepository.FilterProjectMember(p => p.ProjectID.Equals(new Guid(currentProjectID)) && p.UserID.Equals(currentUser.Id));
    var statusProjectMemberOfUser = ProjectMemberOfUser?.FirstOrDefault()?.Status;
    var leader = await UserRepository.GetAsync(x => x.Id == new Guid(currentProjectLeaderID));
}
<!-- Donate by money -->
<section class="my-16 w-full max-w-screen-md mx-auto relative">
    <a asp-action="ManageProject" asp-controller="Project" asp-route-id="@currentProjectID" title="Turn back to donors detail">
        <button class="flex absolute top-2 right-0 items-center rounded-md border border-slate-300 py-2 px-4 text-center text-sm transition-all shadow-sm hover:shadow-lg text-slate-600 hover:text-white hover:bg-slate-800 hover:border-slate-800 focus:text-white focus:bg-slate-800 focus:border-slate-800 active:border-slate-800 active:text-white active:bg-slate-800 disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none" type="button">
            Previous Page
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4 ml-1.5">
                <path fill-rule="evenodd" d="M16.28 11.47a.75.75 0 0 1 0 1.06l-7.5 7.5a.75.75 0 0 1-1.06-1.06L14.69 12 7.72 5.03a.75.75 0 0 1 1.06-1.06l7.5 7.5Z" clip-rule="evenodd"/>
            </svg>
        </button>
    </a>
    <h2 class="text-center font-bold text-2xl mb-6">Donate by money</h2>
    <span class="text-neutral text-center max-w-md mx-auto block">Money from your <a class="link link-primary" asp-action="Index" asp-controller="Wallet">Dynamics wallet</a> will be spent first. If you don't have enough, you will be redirected to top up page.</span>
    <form id="donateByMoneyForm" asp-action="SpendDynamicsMoney" asp-controller="Wallet" method="post" class="donateMoneyForm w-full flex flex-col justify-center items-center gap-8">
        <input type="hidden" name="TargetType" value="@Model.PayRequestDto.TargetType"/>
        <input type="hidden" name="ResourceID" value="@Model.PayRequestDto.ResourceID"/>
        <input type="hidden" name="TargetId" value="@Model.PayRequestDto.TargetId"/>
        <input type="hidden" Name="FromID" value="@currentUser?.Id"/>
        <input type="hidden" name="returnUrl" value="@ViewBag.returnUrl"/>
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <!-- Inputs -->
        @if (Model.TypeDonor.Equals("User"))
        {
            <div class="w-full">
                <!-- Money amount -->
                <label Name="Amount" class="form-control w-full">
                    <span class="label label-text text-lg">Enter your donation</span>
                    <input Name="Amount" type="number"
                           placeholder="Enter money amount"
                           class="input input-bordered w-full" min="10000" max="20000000" required/>
                </label>
                <!-- Message (maybe limit them ?) -->
                <label Name="Message" class="form-control w-full">
                    <span class="label label-text text-lg">Leave a message (optional)</span>
                    <textarea Name="Message" placeholder="Enter message" id="donationMsg"
                              class="textarea textarea-bordered textarea-md w-full" maxlength="500"></textarea>
                </label>
            </div>
        }
        @if (Model.TypeDonor.Equals("Organization"))
        {
            @* REMIND *@
            <div class="w-full">
                <h2 class="w-full max-w-md font-semibold text-blue-600 text-lg"> You are donate as @(organizationUserLead != null ? organizationUserLead.OrganizationName : "Your Organization")</h2>
                <input type="hidden" Name="FromID"/>

                <!-- Money amount -->
                <label Name="Amount" class="form-control w-full">
                    <span class="label label-text text-lg">Enter money amount</span>
                    <input Name="Amount" type="number"
                           placeholder="Enter money Amount"
                           class="input input-bordered w-full" min="10000" max="20000000" required/>
                    <span class="text-gray-800 font-semibold">If the field is empty, the default amount is 10000</span>
                </label>
                <!-- Message (maybe limit them ?) -->
                <label Name="Message" class="form-control w-full">
                    <span class="label label-text text-lg">Leave a message (optional)</span>
                    <textarea Name="Message" placeholder="Enter message"
                              class="textarea textarea-bordered textarea-md w-full "></textarea>

                </label>
            </div>
        }

        <!-- Buttons -->
        <div class="flex-1 flex flex-col gap-4 justify-center items-center">
            <!-- Button for CEO -->
            <!--if userid is ceoid of a organization[check status of userid in organmember ==2], if yes show the button-->
            @*       @if (statusProjectMemberOfUser >= 2)
            {
                <div>
                    <a asp-action="SendDonateRequest" asp-route-projectid="@currentProjectID" asp-route-donor="Organization">
                        <button type="button" class="btn bg-blue-700 text-white w-full font-bold text-lg hover:bg-blue-800">
                            Donate with organization
                        </button>
                    </a>
                    <p class="text-center text-gray-700">
                        Donate as CEO to show your organization's support
                    </p>
                </div>
            }      *@
            <!-- Other button -->
            <button type="submit" class="btn btn-success" id="donateByMoneyBtn" style="min-width: 150px;">Confirm donation</button>
        </div>
    </form>
    @* Modal if user has enough money *@
    <dialog id="confirmDonationModal" class="modal">
        <input type="hidden" value="@currentUser.Id" id="userId"/>
        <div class="modal-box text-black w-full max-w-screen-md">
            <form method="dialog">
                <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
            </form>
            <h3 class="text-lg font-bold">Confirm your donation</h3>
            <div class="py-4">
                <p class="text-success balance">Your current balance: <span></span> VND</p>
                <p class="text-error after">Your balance after donation: <span></span> VND</p>
                <p class="mt-4">Thank you for your generosity! By confirming your donation, you are making a positive impact.</p>
                <p class="mt-2 donAmount">Would you like to proceed with your donation of <strong class="text-success"><span></span> VND</strong>?</p>

                <form method="post" id="confirmPayment" asp-action="SpendDynamicsMoney" asp-controller="Wallet">
                    <input type="hidden" name="amount"/>
                    <input type="hidden" name="returnUrl" value="@Url.Action("ManageProject", "Project", new { id = currentProjectID }, Accessor.HttpContext.Request.Scheme)"/>
                </form>
            </div>
            <div class="modal-action">
                <button class="btn btn-primary" id="confirmDonationBtn">Confirm payment</button>
                <form method="dialog">
                    <!-- if there is a button in form, it will close the modal -->
                    <button class="btn">Close</button>
                </form>
            </div>
        </div>
    </dialog>
    @* Modal if user does not have enough money *@
    <dialog id="needMoreMoneyModal" class="modal">
        <div class="modal-box text-black w-full max-w-screen-md">
            <form method="dialog">
                <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
            </form>
            <h3 class="text-lg font-bold">You are almost there!</h3>
            <div class="py-4">
                <p class="text-error donAmount">Donation amount: <span></span> VND</p>
                <p class="text-error needed">An additional <span></span> VND is needed to support this project!</p>
                <p class="text-success balance">Current balance: <span></span> VND</p>
                <p class="mt-4">Would you like to top up now and complete your donation?</p>
                <p class="text-xs text-neutral mb-4">Minimum top up amount is 10,000 VND*</p>
                <form method="post" id="confirmTopup" asp-action="TopUpAndPay" asp-controller="Wallet">
                    <input name="amount" value="10000" type="hidden"/>
                    <input type="hidden" name="returnUrl" value="@Url.Action("ManageProject", "Project", new { id = currentProjectID }, Accessor.HttpContext.Request.Scheme)"/>
                    <input type="hidden" name="TargetType" value="@Model.PayRequestDto.TargetType"/>
                    <input type="hidden" name="ResourceID" value="@Model.PayRequestDto.ResourceID"/>
                    <input type="hidden" name="TargetId" value="@Model.PayRequestDto.TargetId"/>
                    <input type="hidden" Name="FromID" value="@currentUser?.Id"/>
                    <input type="hidden" name="Message"/>
                    <input type="hidden" name="payAmount" />
                </form>
            </div>
            <div class="modal-action">
                <button class="btn btn-primary" id="cfmBtn">Top up and donate</button>
                <form method="dialog">
                    <!-- if there is a button in form, it will close the modal -->
                    <button class="btn">Close</button>
                </form>
            </div>
        </div>
    </dialog>
</section>

<!-- ----------------------------------------------------------------------------Donate by resource ----------------------------------------->
<section class="mb-16 w-full max-w-screen-md mx-auto">
    <h2 class="text-center font-bold text-2xl mb-6">Donate by resource</h2>
    <div class="flex justify-center min-h-96 w-full">
        @* Donation by excel *@
        <div class="flex flex-col flex-1 p-6 rounded-md shadow-lg">
            <div class="mb-6">
                <h3 class="font-medium text-center text-xl min-h-14">Register multiple donations by Excel</h3>
                <span class="label label-text text-neutral">If you donate multiple resources at once, download the Excel file, modify it and re-submit back to the web.</span>
            </div>
            <div class="mb-4">
                <p class="mb-2 label label-text">1. Download project Excel template</p>
                <div class="w-full flex">
                    <a asp-action="ExportProjectExcel" asp-controller="ExcelExport" class="btn btn-primary btn-sm mx-auto">
                        <svg class="w-6 h-6" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 13V4M7 14H5a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-4a1 1 0 0 0-1-1h-2m-1-5-4 5-4-5m9 8h.01"/>
                        </svg>
                        <button type="submit">Download Excel</button>
                    </a>
                </div>
            </div>
            <form id="donateResourceByImport" asp-action="UploadProjectExcel" asp-controller="ExcelReader" enctype="multipart/form-data" class="flex flex-col h-full flex-1">
                <div class="flex-1">
                    <label class="form-control mb-4">
                        <p class="mb-2 label label-text">2. Upload your Excel file after modified here</p>
                        <label class="flex justify-center w-full" for="file-upload">
                            <div class="btn btn-primary btn-sm">
                                <svg class="w-6 h-6" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v9m-5 0H5a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1v-4a1 1 0 0 0-1-1h-2M8 9l4-5 4 5m1 8h.01"/>
                                </svg>
                                <span>Upload Excel file</span>
                            </div>
                        </label>
                        <input id="file-upload" type="file" name="file" placeholder="Upload Excel file" style="display: none" accept=".xlsx">
                        <span class="text-neutral text-center" id="excelFileName"></span>
                        <div id="notificationExcelMessageFirst" class="text-red-500 text-sm font-semibold" style="display:none;"></div>
                    </label>
                    <div class="flex flex-col mb-4">
                        <p class="mb-2 label label-text">3. Upload proof images</p>
                        <div class="mb-4 w-full">
                            <div class="w-full flex justify-center">
                                <label class="btn btn-primary btn-sm" for="AttachmentFirst" title="These images are used to help the project leader make sure you have actually sent the donation..">
                                    <svg class="w-6 h-6" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                                        <path fill="currentColor" d="M16 18H8l2.5-6 2 4 1.5-2 2 4Zm-1-8.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z"/>
                                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 3v4a1 1 0 0 1-1 1H5m14-4v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1ZM8 18h8l-2-4-1.5 2-2-4L8 18Zm7-8.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z"/>
                                    </svg>
                                    Upload images
                                </label>
                                <input multiple asp-for="@Model.UserDonate.Attachments" type="file" name="images" id="AttachmentFirst" style="display:none;"/>
                            </div>

                            <span id="notificationImgMessageFirst" class="text-red-500 text-sm font-semibold" style="display:none;"></span>
                        </div>
                        <!-- Image file name will be shown here -->
                        <div id="imageContainer" class="flex flex-wrap gap-2 flex-1"></div>
                    </div>
                </div>
                <div class="w-full flex justify-center">
                    <button type="submit"
                            class="btn btn-success mx-auto">
                        Confirm
                    </button>
                </div>
            </form>
        </div>
        <!-- upload excel file-->
        <div class="divider divider-horizontal">OR</div>
        <div class="flex flex-col flex-1 p-6 rounded-md shadow-lg gap-2">
            <div>
                <h3 class="font-medium text-center text-xl min-h-14">Register single donation</h3>
                <span class="label label-text text-neutral">Register a single resource donation request</span>
            </div>

            <form enctype="multipart/form-data" method="post" id="donateResourceForm" asp-action="SendDonateRequest" class="flex flex-col gap-2">
                <div class="flex-1">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <input type="hidden" asp-for="@Model.ProjectID" value="@currentProjectID"/>
                    @if (Model.TypeDonor.Equals("User"))
                    {
                        <input type="hidden" asp-for="@Model.UserDonate.UserID" value="@currentUser?.Id"/>
                        <input type="hidden" asp-for="@Model.TypeDonor" value="User"/>
                        <div class="form-control w-full max-w-md">
                            <label asp-for="@Model.UserDonate.ProjectResourceID" class="label label-text">Select a resource</label>
                            <select asp-for="@Model.UserDonate.ProjectResourceID"
                                    class="select select-bordered w-full"
                                    asp-items="@(ViewData["ResourceTypeList"] as ICollection<SelectListItem>)">
                                <option required disabled selected class="text-center">Select Resource Type</option>
                            </select>
                            <span asp-validation-for="@Model.UserDonate.ProjectResourceID" class="text-danger text-red-500 text-sm font-semibold"></span>
                        </div>
                        <!-- Enter amount -->
                        <label asp-for="@Model.UserDonate.Amount" class="form-control w-full max-w-md">
                            <span class="label label-text">Enter amount</span>
                            <input id="Amount" asp-for="@Model.UserDonate.Amount" type="number" placeholder="Enter amount" class="input input-bordered" min="1" required/>
                            <span asp-validation-for="@Model.UserDonate.Amount" class="text-danger text-red-500 text-sm font-semibold"></span>
                        </label>
                        <label asp-for="@Model.UserDonate.Message" class="form-control w-full max-w-md">
                            <span class="label label-text">Leave a message (optional)</span>
                            <textarea asp-for="@Model.UserDonate.Message" placeholder="Enter message"
                              class="textarea textarea-bordered textarea-md w-full"></textarea>
                        </label>
                        <div class="flex flex-col mb-4 w-full justify-center gap-2">
                            <span class="label label-text">Upload proof images</span>
                            <div class="flex justify-center items-center">
                                <label class="btn btn-primary btn-sm" for="AttachmentSecond"
                                       title="These images are used to help the project leader make sure you have actually sent the donation..">
                                    <svg class="w-6 h-6" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
                                        <path fill="currentColor" d="M16 18H8l2.5-6 2 4 1.5-2 2 4Zm-1-8.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z"/>
                                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 3v4a1 1 0 0 1-1 1H5m14-4v16a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V7.914a1 1 0 0 1 .293-.707l3.914-3.914A1 1 0 0 1 9.914 3H18a1 1 0 0 1 1 1ZM8 18h8l-2-4-1.5 2-2-4L8 18Zm7-8.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0Z"/>
                                    </svg>
                                    Upload images
                                </label>
                                <input multiple asp-for="@Model.UserDonate.Attachments" type="file" name="images" id="AttachmentSecond" style="display:none;"/>
                            </div>
                            <!-- Image file name will be shown here -->
                            @* <span id="fileNameSecond" class="text-gray-600 text-sm mt-2" style="display:none;"></span> *@
                            <span id="notificationImgMessageSecond" class="text-red-500 text-sm font-semibold" style="display:none;"></span>
                            <div id="imageContainer2" class="flex flex-wrap gap-2"></div>
                        </div>
                    }
                </div>
                <div class="flex justify-center w-full">
                    <button type="submit" class="btn btn-success">Confirm</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Step 2 -->
    <div class="flex flex-col justify-center items-center gap-4 my-8">
        <h1 class="text-center font-bold text-2xl">Things to do after donation</h1>
        <h3 class="text-center font-bold text-xl">
            1. Send your resource(s) and then contact with the leader of the project to confirm.
        </h3>
        <div>
            <!-- If you already have this script at layout, you won't need it here. It is for displaying the icons -->
            <script src="https://kit.fontawesome.com/ba8c3661b4.js"
                    crossorigin="anonymous"></script>
            <p>
                <i class="fa-solid fa-at"></i> @leader.Email
            </p>
            <p>
                <i class="fa-solid fa-phone"></i> @leader.PhoneNumber
            </p>
            <p>
                <i class="fa-solid fa-location-dot"></i> @leader.UserAddress
            </p>
        </div>
    </div>
    <!-- Step 3 -->
    <!-- Either show user a button to redirect to user history page or just use the table below -->
    <div class="flex flex-col justify-center items-center gap-4">
        <h3 class="text-center font-bold text-xl">2. Keep track of your donation here or at <a class="link link-primary" asp-action="RequestsStatus" asp-controller="User">request status page</a></h3>
        <!-- Table -->
        <div class="overflow-x-auto">
            <table class="table">
                <thead>
                <tr>
                    <th></th>
                    <th>Name</th>
                    <th>Quantity</th>
                    <th>Status</th>
                </tr>
                </thead>
                <tbody>
                @if (Model.TypeDonor.Equals("User"))
                {
                    for (int i = 0; i < Model.UserTransactionHistory?.Count(); i++)
                    {
                        var item = Model.UserTransactionHistory.ElementAt(i);
                        <tr>
                            <th>@(i + 1)</th>
                            <td>@item.ProjectResource?.ResourceName</td>
                            <td>@item.Amount</td>
                            <td>
                                @if (item.Status == 1)
                                {
                                    <div class="badge badge-success min-w-24">Accepted</div>
                                }
                                else
                                {
                                    <div class="badge badge-error min-w-24">Pending</div>
                                }
                            </td>
                        </tr>
                    }

                    <!-- row 1 -->
                }
                </tbody>
            </table>
        </div>
        <!-- End table -->
    </div>
</section>
@* Check money script *@
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="~/js/CheckForDonateMoneyFromWallet.js"></script>
<script>
    document.getElementById("AttachmentFirst").addEventListener("change", e => handleFileUpload(e, "imageContainer"));
    document.getElementById('AttachmentSecond').addEventListener('change', e => handleFileUpload(e, "imageContainer2"));
    
    function handleFileUpload(event, displayId) {
        console.log(displayId);
        const files = event.target.files;
        const imageContainer = document.getElementById(displayId);
        // Clear existing images
        imageContainer.innerHTML = "";

        Array.from(files).forEach(file => {
            if (file.type.startsWith("image/")) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    // Create a new img element
                    const img = document.createElement("img");
                    img.src = e.target.result;
                    img.className = "w-24 rounded object-cover h-24";
                    // Append the image to the container
                    imageContainer.appendChild(img);
                };
                reader.readAsDataURL(file);
            }
        });
    }    
    const maxFiles = 4;
    // Event listener to update the file name after the file is selected
    document.getElementById("AttachmentFirst").addEventListener('change', function () {
        const attachmentInput = document.getElementById("AttachmentFirst");
        const notificationMessage = document.getElementById("notificationImgMessageFirst");
        const fileNameDisplay = document.getElementById("fileNameFirst");

        if (attachmentInput.files.length > 0) {
            // Check if the number of selected files exceeds the limit
            if (attachmentInput.files.length > maxFiles) {
                notificationMessage.innerText = "You can only upload a maximum of " + maxFiles + " files.";
                notificationMessage.style.display = "block";
                attachmentInput.value = '';  // Reset the input if the file limit is exceeded
                fileNameDisplay.innerText = '';  // Clear displayed file names
            } else {
                notificationMessage.style.display = "none";
                // Display the names of selected files
                const fileNames = Array.from(attachmentInput.files).map(file => file.name);
                // fileNameDisplay.innerText = fileNames.join(', ');
            }
        }
    });
    const excelfileInput = document.getElementById("file-upload");
    const displayExcelFileName = document.getElementById('excelFileName');
    excelfileInput.addEventListener('change', e => {
        let excelFile = excelfileInput.files[0];
        displayExcelFileName.innerHTML = excelFile.name;
    })

    document.querySelector('#donateResourceByImport').addEventListener('submit', function (event) {
        event.preventDefault(); 

        const attachmentInput = document.getElementById("AttachmentFirst");
        const notificationMessage = document.getElementById("notificationImgMessageFirst");
        const notificationExcelMessage = document.getElementById("notificationExcelMessageFirst");

        let isValid = true;
        if (attachmentInput.files.length === 0) {
            event.preventDefault();  // Prevent form submission if no file is selected
            notificationMessage.innerText = "Please upload at least one proof image.";
            notificationMessage.style.display = "block";
            isValid = false;
        } else {
            notificationMessage.style.display = "none";  // Hide the message if files are selected
        }
        if (excelfileInput.files.length === 0) {
            event.preventDefault();  // Prevent form submission if no file is selected
            notificationExcelMessage.innerText = "An excel file must be uploaded.";
            notificationExcelMessage.style.display = "block";
            isValid = false;
        } else {
            notificationExcelMessage.style.display = "none";  // Hide the message if files are selected
        }
        // Check if upload file is in correct format:
        // Get the uploaded file
        let excelFile = excelfileInput.files[0];
        const allowedExtensions = ['xlsx', 'xls', 'csv'];
        function isValidFile(file) {
            if (!file) return false;
            const fileExtension = file.name.slice(file.name.lastIndexOf('.') + 1).toLowerCase();
            return allowedExtensions.includes(fileExtension);
        }
    
        if (!isValidFile(excelFile)) {
            event.preventDefault();
            notificationExcelMessage.innerText = "Invalid Excel file";
            notificationExcelMessage.style.display = "block";
        }

        if (!isValid) {
            return; // Exit if form is not valid
        }

        var form = this; // Reference to the form

        if ($(form).valid()) {  // Assuming jQuery validation is used

            const swalWithTailwind = Swal.mixin({
                customClass: {
                    confirmButton: "bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded",
                    cancelButton: "bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded mr-4"
                },
                buttonsStyling: false
            });

            swalWithTailwind.fire({
                title: "Are you sure?",
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes, I confirm!",
                cancelButtonText: "No, cancel!",
                reverseButtons: true
            }).then(result => {
                if (result.isConfirmed) {
                    Swal.fire({
                        title: "Processing...",
                        text: "Please wait while your donation is being processed.",
                        icon: "info",
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        showConfirmButton: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });

                    const formData = new FormData(form);

                    fetch(form.action, {
                        method: 'POST',
                        body: formData
                    })
                        .then(response => response.json()) // Parse response as JSON
                        .then(data => {
                            Swal.close(); // Close loading alert
                            if (data.success) {
                                swalWithTailwind.fire({
                                    title: "Donate successful!",
                                    html: `<p>${data.message}</p><p>Thank you for your contribution!</p>`,
                                    icon: "success"
                                }).then(() => {
                                    window.location.reload(); // Reload the page on success
                                });
                            } else {
                                swalWithTailwind.fire({
                                    title: "Failed to donate!",
                                    text: data.message,
                                    icon: "error"
                                });
                            }
                        })
                        .catch(error => {
                            swalWithTailwind.fire({
                                title: "Error",
                                text: "An error occurred while processing your request: " + error,
                                icon: "error"
                            });
                        });
                } else if (result.dismiss === Swal.DismissReason.cancel) {
                    swalWithTailwind.fire({
                        title: "Cancelled",
                        text: "Your donation request was canceled.",
                        icon: "error"
                    });
                }
            });
        }
    });
    //-----------------------upload image for one resource---------------
    function thisFileUploadSecond() {
        document.getElementById("AttachmentSecond").click();
    }

    // Event listener to update the file name after the file is selected
    document.getElementById("AttachmentSecond").addEventListener('change', function () {
        const attachmentInput = document.getElementById("AttachmentSecond");
        const notificationMessage = document.getElementById("notificationImgMessageSecond");
        const fileNameDisplay = document.getElementById("fileNameSecond");
        
        if (attachmentInput.files.length > 0) {
            // Check if the number of selected files exceeds the limit
            if (attachmentInput.files.length > maxFiles) {
                notificationMessage.innerText = "You can only upload a maximum of " + maxFiles+ " files.";
                notificationMessage.style.display = "block";
                attachmentInput.value = '';  // Reset the input if the file limit is exceeded
                fileNameDisplay.innerText = '';  // Clear displayed file names
            } else {
                notificationMessage.style.display = "none";
                // Display the names of selected files
                const fileNames = Array.from(attachmentInput.files).map(file => file.name);
                fileNameDisplay.innerText = fileNames.join(', ');
                fileNameDisplay.style.display = "block";
            }
        }
    });

    //---------------sweetalert for donate---------------------
    document.querySelector('#donateResourceForm').addEventListener('submit', function (event) {
        event.preventDefault(); // Prevent default form submission behavior

        const attachmentInput = document.getElementById("AttachmentSecond");
        const notificationMessage = document.getElementById("notificationImgMessageSecond");

        // Clear previous messages
        notificationMessage.style.display = "none";

        let isValid = true;

        // Check if the file is uploaded
        if (attachmentInput.files.length === 0) {
            notificationMessage.innerText = "Please upload at least one proof image.";
            notificationMessage.style.display = "block";
            isValid = false;
        }

        if (!isValid) {
            return; // Exit if form is not valid
        }

        var form = this; // Reference to the form

        if ($(form).valid()) {  // Assuming jQuery validation is used

            const swalWithTailwind = Swal.mixin({
                customClass: {
                    confirmButton: "bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded",
                    cancelButton: "bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded mr-4"
                },
                buttonsStyling: false
            });

            swalWithTailwind.fire({
                title: "Are you sure?",
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes, I confirm!",
                cancelButtonText: "No, cancel!",
                reverseButtons: true
            }).then(result => {
                if (result.isConfirmed) {
                    Swal.fire({
                        title: "Processing...",
                        text: "Please wait while your donation is being processed.",
                        icon: "info",
                        allowOutsideClick: false,
                        allowEscapeKey: false,
                        showConfirmButton: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });
                    const formData = new FormData(form);

                    fetch(form.action, {
                        method: 'POST',
                        body: formData
                    })
                        .then(response => response.json()) // Parse response as JSON
                        .then(data => {
                            Swal.close(); // Close loading alert
                            if (data.success) {
                                swalWithTailwind.fire({
                                    title: "Donate successful!",
                                    html: `<p>${data.message}</p><p>Thank you for your contribution!</p>`,
                                    icon: "success"
                                }).then(() => {
                                    window.location.reload(); // Reload the page on success
                                });
                            } else {
                                swalWithTailwind.fire({
                                    title: "Failed to donate!",
                                    text: data.message,
                                    icon: "error"
                                });
                            }
                        })
                        .catch(error => {
                            swalWithTailwind.fire({
                                title: "Error",
                                text: "An error occurred while processing your request: " + error,
                                icon: "error"
                            });
                        });
                } else if (result.dismiss === Swal.DismissReason.cancel) {
                    swalWithTailwind.fire({
                        title: "Cancelled",
                        text: "Your donation request was canceled.",
                        icon: "error"
                    });
                }
            });
        }
    });

</script>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>