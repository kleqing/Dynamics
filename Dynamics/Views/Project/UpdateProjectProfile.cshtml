@using Microsoft.AspNetCore.Http
@using Newtonsoft.Json
@inject IHttpContextAccessor Accessor
@inject IProjectRepository ProjectRepository
@inject IConfiguration Configuration
@model Dynamics.Models.Dto.UpdateProjectProfileRequestDto

@{
    ViewData["Title"] = "Update " + Model.ProjectName+" Profile";
    Layout = "~/Views/Shared/_LayoutProject.cshtml";
     ShutdownProjectVM shutdownProjectVM = new ShutdownProjectVM();
     FinishProjectVM finishProjectVM = new FinishProjectVM();
         var currentProjectID = Accessor.HttpContext.Session.GetString("currentProjectID");
           string[] projectImages = new string[1] { ","};
    if (Model.Attachment != null)
    {
      projectImages  = Model.Attachment.TrimEnd(',',' ').Split(",");
    }
}
@* <link rel="stylesheet" href="~/css/output.css" /> *@


<!-- include container + button -->
<div class="m-w-screen-2xl flex items-center justify-center relative">
<!-- edit button -->
<a asp-action="ManageProject" asp-route-id="@Model.ProjectID" title="Turn back to project detail">
    <button class="flex absolute top-2 right-0  items-center rounded-md border border-slate-300 py-2 px-4 text-center text-sm transition-all shadow-sm hover:shadow-lg text-slate-600 hover:text-white hover:bg-slate-800 hover:border-slate-800 focus:text-white focus:bg-slate-800 focus:border-slate-800 active:border-slate-800 active:text-white active:bg-slate-800 disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none" type="button">
        Previous page

            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-4 h-4 ml-1.5">
                <path fill-rule="evenodd" d="M16.28 11.47a.75.75 0 0 1 0 1.06l-7.5 7.5a.75.75 0 0 1-1.06-1.06L14.69 12 7.72 5.03a.75.75 0 0 1 1.06-1.06l7.5 7.5Z" clip-rule="evenodd" />
            </svg>
        </button>
    </a>
    <!-- container start -->
    <div class="flex flex-col relative" style="width: 70%;">
        @if(Model.ProjectStatus == 0 || Model.ProjectStatus == 1)
        {
    <div class="w-full flex-col shadow-md shadow-blue-500/30 p-6 rounded-xl my-10">
        <h2 class=" text-black font-bold text-xl text-center mb-4">Update @Model.ProjectName profile</h2>
        <!-- form 1 -->
        <form id="updateProjectForm" asp-action="UpdateProjectProfile" asp-controller="Project" enctype="multipart/form-data" method="post">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="@Model.ProjectID"/>
            <input type="hidden"  asp-for="@Model.OldLeaderID" value="@Model.NewLeaderID" />
            <div class="grid grid-cols-2 gap-x-10 gap-y-3">
                <div>
                    <label asp-for="@Model.ProjectName" class="block mb-2 text-md font-medium text-gray-900">Enter project Name</label>
                    <input asp-for="ProjectName" type="text" id="first_name"
                           class="bg-white border border-gray-300 text-navy-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
                           required />
                    <span asp-validation-for="ProjectName" class="text-danger"></span>
                </div>
                <div class="flex flex-col mt-4">
                    <div class="flex justify-start items-center">
                        <label for="Attachment" class="block mb-2 text-md font-medium text-gray-900 pr-4">Upload project images</label>
                        <input multiple asp-for="Attachment" type="file" name="images" id="Attachment" style="display:none;" />
                        <input type="hidden" id="attachmentHidden" asp-for="Attachment" value="@Model.Attachment" />

                        <button id="button" type="button" class="w-fit h-10 px-4 rounded-md  inline-flex items-center justify-center
                                p-0.5 mb-2 me-2 overflow-hidden text-sm font-medium text-white bg-blue-800" onclick="thisFileUpload();">
                            Choose images
                        </button>
                    </div>
                    <!-- Image file name will be shown here -->
                    <span id="fileName" class="text-gray-600 text-sm mt-2"></span>
                    <span class="text-gray-400 text-sm">The images will appear in your project covers and description</span>
                    <div id="notificationImgMessage" class="text-red-500 text-sm font-bold" style="display:none;"></div>

                </div>
                <div>
                    <label asp-for="ProjectDescription"
                           class="block mb-2 text-md font-medium text-gray-900">Project Description</label>
                    <textarea asp-for="ProjectDescription" rows="4" class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 "></textarea>
                    <span asp-validation-for="ProjectDescription" class="text-danger"></span>
                </div>
                <!-- list image -->
                <div class="flex justify-start gap-6 pt-10 flex-wrap">
                    @foreach(var image in projectImages)
                    {
                        <div class="flex flex-col">
                            <img class="h-24 w-24 object-cover rounded-1/2"
                                 src="@image"
                                 alt="Current project photo" />
                            <a asp-action="DeleteImage" asp-route-imgpath="@image" class="text-gray-900 text-sm font-semibold hover:text-red-500">Remove image</a>
                        </div>
                    }
                </div>
                <!-- start time -->
                <div>
                    <label asp-for="@Model.StartTime" class="block mb-2 text-md font-medium text-gray-900">Select a project start time</label>
                    <input type="date" asp-for="@Model.StartTime"
                           class="bg-white border border-gray-300 text-navy-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
                           id="startDateInput"
                           required />
                    <span class="text-gray-400 text-sm">The date that your project starts. Before that, your project will continue to receive donations.</span>
                    <span asp-validation-for="@Model.StartTime" class="text-danger"></span>
                    <span id="notificationMessage" class="text-red-500 text-sm font-bold" style="display:none;"></span>
                </div>
                <!-- end time -->
                <div>
                    <label asp-for="@Model.EndTime" class="block mb-2 text-md font-medium text-gray-900">Select a project end time (estimated)</label>
                    <input type="date" asp-for="@Model.EndTime"
                           class="bg-white border border-gray-300 text-navy-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
                           id="endDateInput"
                           required />
                    <span class="text-gray-400 text-sm">The estimates date that your project will end.</span>
                    <span asp-validation-for="EndTime" class="text-danger"></span>
                </div>
                  
                <!-- leader -->
                <!-- @*NOTE: create member, assign leader to project, assign member to project, get memberProject list,
                    change it *@ -->
                <div>
                    <label asp-for="@Model.NewLeaderID" class="block mb-2 text-md font-medium text-gray-900">Assign a member who will lead this project </label>
                    <select asp-for="NewLeaderID"
                            class="bg-white border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
                            asp-items="@(ViewData["MemberList"] as ICollection<SelectListItem>)">
                        <option disabled selected>---Select Leader---</option>
                    </select>
                    <span asp-validation-for="NewLeaderID" class="text-danger"></span>
                </div>
                <!-- status -->
                <div>
                  
                    <label asp-for="ProjectStatus" class="block mb-2 text-md font-medium text-gray-900">Set status for this project</label>
                    @if (Model.ProjectStatus == 0)
                    {
                        <select asp-for="ProjectStatus"
                                class="bg-white border border-gray-300 text-navy-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
                                asp-items="@(ViewData["StatusList"] as IEnumerable<SelectListItem>)"
                                onchange="checkStatus(this)"
                                id="statusSelect">
                            <option disabled selected>---Select Status---</option>
                        </select>
                        <label class="text-sm text-neutral">If your project has gathered enough donations, set the status to <b>in progress</b></label>
                    }
                    else
                    {
                        <select asp-for="ProjectStatus" readonly class="bg-white border border-gray-300 text-navy-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5">
                            <option value="1" selected>In progress</option>
                        </select>
                    }
                    <span asp-validation-for="ProjectStatus" class="text-danger"></span>
                </div>
                <div id="bankDetailsPopup" style="display: none;" class="popup fixed inset-0 bg-gray-900 bg-opacity-50 flex justify-center items-center z-50">
                    <div class="bg-white p-6 rounded-lg shadow-lg max-w-lg w-full">
                        <h3 class="text-xl font-bold text-gray-800 text-center mb-4">Create a withdraw request</h3>
                        <h2 class="text-md text-center font-semibold">Tell us about your bank details</h2>
                        <h3 class="text-sm text-neutral text-center mb-4 w-full">Your bank account is essential for us to send the donation money amount your project has gathered before</h3>
                        <!-- Bank Account Number -->
                        <label for="bankAccountNumber" class="block text-md font-medium text-gray-900 mb-2">Bank Account Number</label>
                        <input type="text" id="bankAccountNumber" class="input input-bordered focus:input-primary mb-4 w-full" required/>

                        <!-- Bank Name -->
                        <label for="bankName" class="block text-md font-medium text-gray-900 mb-2">Bank Name</label>
                        <select id="bankName" class="select select-bordered focus:select-primary mb-4 w-full" required>
                            <option disabled selected>---Select Bank---</option>
                        </select>

                        <!-- Message -->
                        <label for="bankMessage" class="block text-md font-medium text-gray-900 mb-2">Reason why you are creating a withdraw request</label>
                        <textarea id="bankMessage" class="textarea textarea-bordered focus:textarea-primary mb-4 w-full"></textarea>

                        <!-- Buttons -->
                        <div class="flex justify-end gap-4 mt-4">
                            <button type="button" onclick="submitBankDetails()" class="btn btn-primary">
                                Submit
                            </button>
                            <button type="button" onclick="closePopup(true)" class="btn btn-neutral">
                                Close
                            </button>
                        </div>
                    </div>
                </div>

                <div>
                    <label asp-for="@Model.ProjectEmail" class="block mb-2 text-md font-medium text-gray-900">Enter project email</label>
                    <input asp-for="@Model.ProjectEmail" type="email" id="email"
                           class="bg-white border border-gray-300 text-navy-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
                           required />
                    <span asp-validation-for="@Model.ProjectEmail" class="text-danger"></span>
                </div>
                <div>
                    <label asp-for="@Model.ProjectPhoneNumber" class="block mb-2 text-md font-medium text-gray-900">Enter project phone number</label>
                    <input asp-for="@Model.ProjectPhoneNumber" id="phone"
                           class="bg-white border border-gray-300 text-navy-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
                           required />
                    <span asp-validation-for="@Model.ProjectPhoneNumber" class="text-danger"></span>
                </div>
            </div>
             
            <!-- address-->
            <div class="flex flex-col mt-2">
                @{
                    var province = "";
                    var district = "";
                    var ward = "";
                    var homeAddr = "";
                    // If user has address, split them and put in order
                    if (Model.ProjectAddress != null)
                    {
                        // Example: 23 Phan Nhu, Thanh Khe Tay, Thanh Khe, Da Nang
                        var splitAddr = Model.ProjectAddress.Split(",").ToList();
                        // In case some address is missing, we left it as empty
                        for (int i = 0; i < splitAddr.Count; i++)
                        {
                            switch (i)
                            {
                                case 0:
                                    homeAddr = splitAddr[0];
                                    break;
                                case 1:
                                    ward = splitAddr[1];
                                    break;
                                case 2:
                                    district = splitAddr[2];
                                    break;
                                case 3:
                                    province = splitAddr[3];
                                    break;
                            }
                        }
                    }
                }
                <label asp-for="@Model.ProjectAddress" class="block mb-2 text-md font-medium text-gray-900">Choose address</label>
                <div class="flex justify-between items-end gap-x-6">
                    <select required class="bg-white border h-10 border-gray-300 text-navy-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-2/3 p-2.5" id="city">
                        <option id="pOption" value="@province" selected>@(province == "" ? "Choose province" : province)</option>
                    </select>

                    <select required class="bg-white border h-10 border-gray-300 text-navy-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-2/3 p-2.5" id="district">
                        <option id="dOption" value="@district" selected>@(district == "" ? "Choose district" : district)</option>
                    </select>

                    <select required class="bg-white border  h-10 border-gray-300 text-navy-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-2/3 p-2.5" id="ward">
                        <option id="wOption" value="@ward" selected>@(ward == "" ? "Choose ward/commune" : ward)</option>
                    </select>
                    <input type="text"
                           placeholder="Enter street and house number"
                           class="bg-white border border-gray-300 h-10 text-navy-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
                           value="@homeAddr"
                           id="ProjectAddress" />
                </div>
            </div>
            <input asp-for="ProjectAddress" name="ProjectAddress" type="hidden" id="ProjectAddressStr" value="@Model.ProjectAddress">
                    
            <div class="flex justify-center gap-x-6">
                <button type="submit" 
                        class="mt-4 text-md text-white bg-blue-800 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-bold rounded-lg w-full sm:w-auto px-5 py-2.5 text-center">
                    Update
                </button> 
                <button type="reset"
                        class="mt-4 text-md text-white bg-blue-800 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-bold rounded-lg w-full sm:w-auto px-5 py-2.5 text-center">
                    Reset
                </button>
            </div>
        </form>
    </div>
    }
        @if(Model.ProjectStatus >= 1)
        {
            @if (Model.ProjectStatus == 2)
            {
                <div class="h-40"></div>
            }
            @* finish project *@
            <div class="w-full mx-auto flex-col shadow-md shadow-blue-500/30 p-6 rounded-xl my-10">
                <h2 class=" text-black font-bold text-xl text-center ">Finish project</h2>
                <!-- form 2 -->
                @if (string.IsNullOrEmpty(Model.ReportFile))
                {
                    <form id="ImportFileProject" method="post" asp-action="ImportFileProject" asp-controller="Project"
                          enctype="multipart/form-data">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        <input type="hidden" name="ProjectID" value="@Model.ProjectID" />
                 
                        <div class="flex flex-col justify-center items-center ">
                            <h2 class="text-sm text-gray-900">Please submit a report file to your organization first before mark a project as finished.</h2>
                            <div class="flex justify-center items-center gap-x-4">
                                <input asp-for="@finishProjectVM.ReportFile" type="file" id="reportFile" name="reportFile" style="display:none;" accept=".doc,.xls,.xlsx,.docx,.csv" />
                                <div class="flex flex-col items-center justify-center">
                                    <button id="button" type="button" value="Choose file" class="w-fit h-10 px-4 rounded-md  inline-flex items-center justify-center
                          p-0.5 me-2 overflow-hidden text-sm font-bold text-gray-900
                          bg-gray-300
                              " onclick="thisFileReportUpload();">
                                        Choose file
                                    </button>
                                    <div id="reportFileName" class="text-gray-500 text-sm font-medium"></div>
                                    <div id="notificationReportMessage" class="text-red-500 text-sm font-semibold" style="display:none;"></div>
                                </div>
                                <button type="button" class="w-fit h-10 px-4 rounded-md inline-flex items-center justify-center
                            p-0.5 my-2 me-2 overflow-hidden text-sm font-bold text-gray-500 bg-gray-300 cursor-not-allowed" disabled>
                                    No Report File Available
                                </button>
                            
                            </div> 
                     
                        </div>
                        <div class="flex flex-col items-center mt-2">
                            <button type="submit"
                                    class=" text-md text-white bg-green-500 hover:bg-green-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-bold rounded-lg w-full sm:w-auto px-6 py-2.5 text-center">
                                Confirm
                            </button>
                        </div>
                      
                    </form>
                }
                else
                {
                    <div class="flex flex-col justify-center items-center my-4">
                    <a asp-action="DownloadFile" asp-route-filewebpath="@Model.ReportFile" download>
                        <button type="button" class="w-fit h-10 px-4 rounded-md inline-flex items-center justify-center
                                p-0.5 my-2 me-2 overflow-hidden text-sm font-bold text-white bg-blue-700">
                            Download Report File
                        </button>
                    </a>
                    </div>
                }
                <!-- end form 2 -->
            </div>
            @if (Model.ProjectStatus == 2)
            {
                <div class="h-40"></div>
            }
        }
        @if(Model.ProjectStatus == 0 || Model.ProjectStatus == 1)
        {
            @* shutdown project *@
            <div class="w-1/2 mx-auto flex-col shadow-md shadow-blue-500/30 p-6 rounded-xl my-10">
                <h2 class=" text-black font-bold text-xl text-center ">Shutdown project</h2>

        <!-- form 3 -->
        <form id="shutdownProjectForm" method="post" asp-action="ShutdownProject" asp-controller="Project">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="@shutdownProjectVM.ProjectID" value="@currentProjectID" />
            <div class="grid grid-cols-1 gap-y-3">
                <div>
                    <label asp-for="@shutdownProjectVM.Reason" class="block mb-2 text-md font-medium text-gray-900">Enter reason to shut down project</label>
                    <textarea asp-for="@shutdownProjectVM.Reason" id="Reason" rows="4" class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 " placeholder="Write reason here..."></textarea>
                    <span id="notificationShutdownMessage" class="text-red-500 text-sm font-semibold"></span>
                </div>
            </div>
            <div class="flex flex-col items-center">
                <button type="submit"
                        class="mt-4 text-md text-white bg-red-500 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-bold rounded-lg w-full sm:w-auto px-5 py-2.5 text-center">
                    Shutdown
                </button>
                <span class="text-gray-400 text-sm">This action is permanent.</span>
            </div>
        </form>
        <!-- end form 3 -->
    </div>
}
</div>
<!-- container end -->
</div>

@*Bank script*@
<script>
    document.addEventListener("DOMContentLoaded", getBanks);

    // Fetch Banks data and populate the bank dropdown
    async function getBanks() {
        try {
            const response = await fetch('https://api.vietqr.io/v2/banks');
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            const data = await response.json();

            if (data.code === "00") {
                const banks = data.data;
                console.log(banks);
                loadBanks(banks);
            } else {
                console.error("Failed to retrieve banks:", data.desc);
            }
        } catch (error) {
            console.error("Error fetching banks:", error);
        }
    }

    // Populate the bank dropdown with options
    function loadBanks(banks) {
        const bankSelect = document.getElementById("bankName");
        bankSelect.innerHTML = '<option disabled selected>---Select Bank---</option>'; // Reset dropdown
        banks.forEach(bank => {
            const option = document.createElement("option");
            option.value = bank.bin;
            option.text = `(${bank.shortName})  ${bank.name}`;
            bankSelect.appendChild(option);
        });
    }

    // Show or hide the bank details form based on project status
    function checkStatus(selectElement) {
        const bankDetailsPopup = document.getElementById("bankDetailsPopup");
        console.log(selectElement.value);
        let u = bankDetailsPopup.style.display;
        console.log(u);

        if (selectElement.value == 1) {
            bankDetailsPopup.style.display = "flex";
        } else {
            bankDetailsPopup.style.display = "none";
        }
    }

    // Close the bank details popup
    function closePopup(isCanceled) {
        document.getElementById("bankDetailsPopup").style.display = "none";
        var selectElement = document.getElementById("statusSelect");
        console.log(selectElement)
        if (selectElement != null) {
            let optionToSelect;
            if (isCanceled) {
                optionToSelect = selectElement.querySelector('option[value="0"]');
            } else {
                optionToSelect = selectElement.querySelector('option[value="1"]');
            }
            selectElement.value = optionToSelect.value;
            
        }
    }

    // Submit bank details (example with AJAX)
    function submitBankDetails() {
        const bankAccountNumber = document.getElementById("bankAccountNumber").value;
        const bankName = document.getElementById("bankName").value;
        const message = document.getElementById("bankMessage").value;
        const projectID = "@Model.ProjectID";
        console.log(bankAccountNumber)
        console.log(bankName)
        console.log(message)
        console.log(projectID)

        $.ajax({
            url: '@Url.Action("CreateWithdraw", "Withdraw")',
            type: 'POST',
            data: {
                projectid: projectID,
                bankAccountNumber: bankAccountNumber,
                bankId: bankName,
                message: message
            },
            success: function(response) {
                const swalWithTailwind = Swal.mixin({
                    customClass: {
                        confirmButton: "btn btn-md btn-success min-w-xs"
                    },
                    buttonsStyling: false // Disable default styling to use custom classes
                });
                if (response.failed) {
                    // Display failure notification if `failed` is true in response
                    swalWithTailwind.fire({
                        title: "Withdraw request sent unsuccessfully",
                        icon: "error",
                        text: response.message
                    }).then(() => {
                        closePopup(false);
                    });
                } else {
                    // Display success notification if `failed` is false or not present
                    swalWithTailwind.fire({
                        title: "Withdraw request sent",
                        icon: "success",
                        text: 'Please wait and check your email regularly in the meantime.\nNote: We will take 1% of the donation as maintenance fee ' 
                    }).then(() => {
                        closePopup(false);
                    });
                }
            },
            error: function(xhr) {
                alert("Error: " + xhr.responseText);
            }
        });
    }

</script>
<!-- script upload image-->
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.1/axios.min.js"></script>
<script>
    //--------require up finish file----------------------------
    document.querySelector('#ImportFileProject').addEventListener('submit', function (event) {
        const attachmentInput = document.getElementById("reportFile");
        const notificationMessage = document.getElementById("notificationReportMessage");
        if (attachmentInput.files.length === 0) {
            event.preventDefault();  // Prevent form submission if no file is selected
            notificationMessage.innerText = "Please upload a file before finish project.";
            notificationMessage.style.display = "block";
        } else {
            notificationMessage.style.display = "none";  // Hide the message if files are selected
        }
    });

    //-------------------file image upload-------------------
    function thisFileUpload() {
        document.getElementById("Attachment").click();
    };
    const maxFiles = 4;
    // Event listener to update the file name after the file is selected
    document.getElementById("Attachment").addEventListener('change', function () {
        console.log('upload images project')
        if (document.getElementById("Attachment").files.length > 0) {
             
            if (document.getElementById("Attachment").files.length > maxFiles) {
           document.getElementById("notificationImgMessage").innerText = "You can only upload a maximum of "+maxFiles +" files.";
            document.getElementById("notificationImgMessage").style.display = "block";
            input.value = '';  // Reset the input if the file limit is exceeded
        }else{
            document.getElementById("notificationImgMessage").style.display = "none";
        }
        var files = document.getElementById("Attachment").files;
        var fileNames = [];
        
        for (var i = 0; i < files.length; i++) {
            fileNames.push(files[i].name);
        }
        // Join file names with a separator (comma or newline)
        document.getElementById("fileName").innerText = fileNames.join(', ');
        }
    });
    //----------------------upload file report
      function thisFileReportUpload() {
        document.getElementById("reportFile").click();
    };
       document.getElementById("reportFile").addEventListener('change', function () {
    console.log('File selected:', this.files[0].name);
         if (this.files.length > 0) {
        var files = document.getElementById("reportFile").files;
        var fileName = files[0].name;  // Access the first file's name
        document.getElementById("reportFileName").innerText = fileName;
        document.getElementById("reportFileName").style.display = "block";  // Show the file name
        console.log('File selected:', fileName);  // Log the file name
    }
    });
</script>
<script>
    //---------------sweetalert for shutdown---------------------
    document.querySelector('#shutdownProjectForm').addEventListener('submit', function (event) {
        console.log('shutdown project');
        const reasonInput = document.getElementById("Reason");
        const notificationMessage = document.getElementById("notificationShutdownMessage");
        if (reasonInput.value.length === 0) {
            event.preventDefault();  // Prevent form submission if no file is selected
            notificationMessage.innerText = "Reason to shutdown project is required.";
            notificationMessage.style.display = "block";
        } else {
            notificationMessage.style.display = "none";
            event.preventDefault();
            var form = this;

            if ($(form).valid()) {

                const swalWithTailwind = Swal.mixin({
                    customClass: {
                        confirmButton: "bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded",
                        cancelButton: "bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded mr-4"
                    },
                    buttonsStyling: false // Disable default styling to use custom classes
                });

                swalWithTailwind.fire({
                    title: "Are you sure?",
                    text: "You won't be able to revert this!",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonText: "Yes, I confirm!",
                    cancelButtonText: "No, cancel!",
                    reverseButtons: true
                }).then(result => {
                    if (result.isConfirmed) {
                        // If confirmed, send the form data using fetch API
                        fetch(form.action, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded'  // Set the content type for form data
                            },
                            body: new URLSearchParams(new FormData(form))  // Serialize the form data
                        })
                            .then(response => response.json())  // Parse the JSON response
                            .then(data => {
                                // Check if the server returned success
                                if (data.success) {
                                    swalWithTailwind.fire({
                                        title: "Shutdown!",
                                        html: `<p>${data.message}</p><p>${data.remind}</p>`,
                                        icon: "success"
                                    }).then(() => {
                                        console.log("Redirecting to: /Project/Index/" + data.userIDString);  // Debugging: ensure the redirect is triggered
                                        window.location.href = `/Project/Index/${data.userIDString}`;
                                    });
                                } else {
                                    swalWithTailwind.fire({
                                        title: "Error",
                                        text: data.message,
                                        icon: "error"
                                    });
                                }
                            })
                            .catch(error => {
                                // Handle network errors or other issues
                                swalWithTailwind.fire({
                                    title: "Error",
                                    text: "An error occurred while processing your request: " + error,
                                    icon: "error"
                                });
                            });
                    } else if (result.dismiss === Swal.DismissReason.cancel) {
                        swalWithTailwind.fire({
                            title: "Cancelled",
                            text: "Your shutdown request was canceled.",
                            icon: "error"
                        });
                    }
                });
            }
        }
    });
</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const startDateInput = document.getElementById('startDateInput');
        const endDateInput = document.getElementById('endDateInput');
        const notificationMessage = document.getElementById('notificationMessage');
        const updateProjectForm = document.getElementById('updateProjectForm');

        function validateDates() {
            const startDate = new Date(startDateInput.value);
            const endDate = new Date(endDateInput.value);

            notificationMessage.style.display = 'none';
            notificationMessage.innerText = '';

            if (startDate > endDate) {
                notificationMessage.style.display = 'block';
                notificationMessage.innerText = `Start date (${startDateInput.value}) cannot be after the end date (${endDateInput.value})`;
                return false;
            }
            return true;
        }

        endDateInput.addEventListener('change', function (event) {
            event.preventDefault();
            console.log("validate end date");
            validateDates();
        });

        updateProjectForm.addEventListener('submit', function (event) {
            event.preventDefault();
            console.log("Updating project");

            if (validateDates()) {
                const cityName = document.getElementById('city').selectedOptions[0].text;
                const districtName = document.getElementById('district').selectedOptions[0].text;
                const wardName = document.getElementById('ward').selectedOptions[0].text;
                const homeAddr = document.querySelector('#ProjectAddress');
                const projectAddr = document.querySelector("#ProjectAddressStr");

                projectAddr.value = `${homeAddr.value}, ${wardName}, ${districtName}, ${cityName}`;

                // Submit the form if validation passes
                updateProjectForm.submit();
            }
        });
    });

</script>
<script>
    let cities = document.getElementById("city");
    let districts = document.getElementById("district");
    let wards = document.getElementById("ward");
    let Parameter = {
        url: "https://raw.githubusercontent.com/kenzouno1/DiaGioiHanhChinhVN/master/data.json",
        method: "GET",
        responseType: "application/json",
    };
    let promise = axios(Parameter);
    promise.then(function (result) {
        renderCity(result.data);
    });

    function renderCity(data) {
        console.log("City:dsfsdf sd");
        for (const x of data) {
            cities.options[cities.options.length] = new Option(x.Name, x.Id);
        }
        cities.onchange = function () {
            console.log("City:city ne");
            district.length = 1;
            ward.length = 1;
            if (this.value !== "") {
                const result = data.filter(n => n.Id === this.value);

                for (const k of result[0].Districts) {
                    district.options[district.options.length] = new Option(k.Name, k.Id);
                }
            }
        };
        district.onchange = function () {
            console.log("City:district ne");
            ward.length = 1;
            const dataCity = data.filter((n) => n.Id === cities.value);
            if (this.value !== "") {
                const dataWards = dataCity[0].Districts.filter(n => n.Id === this.value)[0].Wards;

                for (const w of dataWards) {
                    wards.options[wards.options.length] = new Option(w.Name, w.Id);
                }
            }
        };
    }

</script>