@inject IHttpContextAccessor Accessor
@using Dynamics.Utility
@model Dynamics.Models.Models.Request
@{
    ViewData["Title"] = "Detail request";
    // take current user
    var userIDString = Accessor.HttpContext.Session.GetString("currentUserID");

    string[] projectImages = new string[1] { "," };
    if (Model.Attachment != null)
    {
        projectImages = Model.Attachment.TrimEnd(',', ' ').Split(",");
    }
}

<!-- container start -->
<main class=" p-16">
    <p class="text-center font-medium text-3xl mb-8">@Model.RequestTitle</p>
    <div class="flex justify-between relative gap-16">
        <div class="flex flex-col text-xl w-3/4">
            <!-- part 1-image -->
            <div class="w-full justify-end items-center relative">
                <div class=" items-center relative">
                    <!-- Main image container -->
                    <div id="carousel" class=" bg-gray-300 rounded-lg overflow-hidden relative" style="height:32rem; margin: 0 auto">
                        <!-- Images will be inserted here by JavaScript -->
                    </div>
                </div>

                <!-- Indicator dots  -->
                <div class="flex justify-center my-10 mt-4 space-x-2 relative" id="indicator">
                    <!-- Navigation buttons -->

                    @foreach (var img in projectImages)
                    {
                        <div onclick="updateCarouselAsUserWant('@img')" class="w-20 h-20 bg-gray-300 rounded-xl mr-2 hover:ring-4 hover:ring-blue-500 cursor-pointer">
                            <img src="@img" class="w-full h-full items-center rounded-xl" alt="Request image">
                        </div>
                    }
                    <button id="prevBtn"
                            class="absolute top-10  transform -translate-y-1/2 bg-white rounded-full p-2 shadow-md" style="left:14rem;">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                             xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7">
                            </path>
                        </svg>
                    </button>
                    <button id="nextBtn"
                            class="absolute top-10 transform -translate-y-1/2 bg-white rounded-full p-2 shadow-md" style="right:14rem;">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                             xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7">
                            </path>
                        </svg>
                    </button>
                </div>
            </div>
            <!-- end part 1-image -->
            <div class="border-t p-6 ">
                <h2 class="font-semibold mb-2 text-black text-2xl">Contact Information:</h2>
                <p class="text-gray-600  text-md">✉ @Model.RequestEmail</p>
                <p class="text-gray-600  text-md">📞 @Model.RequestPhoneNumber</p>
                <p class="text-gray-600  text-md">🏠 @Model.Location</p>
            </div>
            <div class="border-t p-4 mt-0">
                <h2 class="font-semibold mb-2 text-black text-2xl">Description</h2>

                <details id="descriptionDetails" class="collapse bg-base-200">
                    <summary class="collapse-title text-md font-medium cursor-pointer">
                        <div id="description-container" class="cursor-pointer" onclick="toggleDescription()">
                            <p class="text-gray-600 text-md line-clamp-3" id="summaryText">
                                @Model.Content
                            </p>
                            <p class="hidden" id="fullText">
                                @Model.Content
                            </p>
                        </div>
                    </summary>
                </details>
            </div>
            <div class="border-t p-4 mt-0">
                <h2 class="font-semibold mb-2 text-black text-2xl">Requester</h2>
                <div class="flex justify-start">
                    <div>
                        <img class="rounded-full w-14 h-14 mx-4 mb-4"
                             src="@Model.User.UserAvatar"
                             alt="avatar">
                    </div>
                    <div class="flex flex-col ">
                        <p class="text-gray-600 font-normal">
                            Requester:
                            <span class="text-black font-bold  text-md">
                                @Model.User.UserName
                            </span>
                        </p>
                        <p class="text-gray-400 font-normal  text-md ">Address: @Model.User.UserAddress</p>
                    </div>
                </div>
            </div>
        </div>

        @* Show edit button and no accept button *@
        @if (!string.IsNullOrEmpty(userIDString) && Model.UserID.Equals(new Guid(userIDString)))
        {
            <div class="bg-white rounded-3xl shadow-2xl flex flex-col gap-4 justify-start p-6 w-1/4 flex-shrink-0 h-full top-32 sticky">
                <a asp-action="Edit" asp-route-id="@Model.RequestID" title="Edit request profile" class="btn btn-primary btn-md">
                    <button type="button" class="flex items-center gap-8">
                        Edit request detail <i class="fa-solid fa-pen-to-square text-xl"></i>
                    </button>
                </a>
                <form id="deleteForm" class="btn btn-error btn-md" asp-action="Delete" asp-controller="Request" method="post">
                    <input type="hidden" name="id" value="@Model.RequestID"/>
                    <button type="button" class="flex items-center gap-8">
                        Delete request <i class="fa-regular fa-circle-xmark text-xl"></i>
                    </button>
                </form>
                <a asp-action="AcceptRequest" asp-route-id="@Model.RequestID" title="Edit request profile" class="btn btn-primary btn-md">
                    <button type="button" class="flex items-center gap-8">
                        Accept this request!
                    </button>
                </a>
            </div>
        }
    </div>
</main>
<script>
    
</script>


<script>
    // Delete project confirmation
    let delForm = document.querySelector('#deleteForm');
    if (delForm != null) {
        delForm.addEventListener('click', (e) => {
            Swal.fire({
                title: "Do you want to delete the request?",
                text: "You cannot go back",
                icon: 'warning',
                showDenyButton: true,
                showConfirmButton: true,
                confirmButtonText: "Yes please do",
                denyButtonText: `No I changed my mind`,
                customClass: {
                    confirmButton: "btn btn-md btn-success mr-4",
                    denyButton: "btn btn-md btn-error",
                },
                buttonsStyling: false
            }).then((result) => {
                /* Read more about isConfirmed, isDenied below */
                if (result.isConfirmed) {
                    Swal.fire({
                        title: "Your request has been deleted!",
                        showConfirmButton: true,
                        confirmButtonText: "Thanks",
                        customClass: {
                            confirmButton: "btn btn-md btn-success",
                        },
                        icon: 'success',
                        buttonsStyling: false,
                    }).then((result) => {delForm.submit();})
                } else if (result.isDenied) {
                }
            });
        })
    }
    
    
    @* close modal *@
        function closeModal() {
            document.getElementById('ReportModal').close();
        }

    @* handle carousel *@
    const carousel = document.getElementById('carousel');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const images = @Html.Raw(Json.Serialize(projectImages));

    let currentIndex = 0;

    function updateCarouselAsUserWant(src) {
        // Update the carousel with the selected image
        carousel.innerHTML = `<img src="${src}" class="w-full object-cover items-center cursor-pointer" alt="Project image" style="height: 40rem;">`;

        const srcFilename = src.split('/').pop(); // Get the file name from the src
        const indicators = document.querySelectorAll('.flex.justify-center.mt-4.space-x-2 > div > img');

        // Loop through each indicator to compare its src with the selected image src
        indicators.forEach((indicator) => {
            const indicatorFilename = indicator.src.split('/').pop(); // Get the file name from the indicator src

            // Compare the filenames of the indicator's img and the selected image
            if (indicatorFilename === srcFilename) {
                // Apply special class to highlight the current image (e.g., a mask or border)
                indicator.classList.add('ring-4', 'ring-blue-500');
            } else {
                // Remove the highlight from other images
                indicator.classList.remove('ring-4', 'ring-blue-500');
            }
        });
    }
    function updateCarousel() {
        carousel.innerHTML = `<img src="${images[currentIndex]}" class="w-full object-cover items-center" alt="Project image" style="height: 40rem;">`;
        updateIndicators();
    }

    function updateIndicators() {
        // Select all the image indicators
        const indicators = document.querySelectorAll('.flex.justify-center.mt-4.space-x-2 > div > img');
        indicators.forEach((indicator, index) => {
            if (index === currentIndex) {
                // Apply special class to highlight the current image (e.g., a mask or border)
                indicator.classList.add('ring-4', 'ring-blue-500');
            } else {
                // Remove the highlight from other images
                indicator.classList.remove('ring-4', 'ring-blue-500');
            }
        });
    }

    prevBtn.addEventListener('click', () => {
        currentIndex = (currentIndex - 1 + images.length) % images.length;
        updateCarousel();
    });

    nextBtn.addEventListener('click', () => {
        currentIndex = (currentIndex + 1) % images.length;
        updateCarousel();
    });

    // Initialize the carousel
    updateCarousel();
    function toggleDescription() {
        const summaryText = document.getElementById('summaryText');
        const fullText = document.getElementById('fullText').textContent;

        if (summaryText.classList.contains('line-clamp-3')) {
            // Hiển thị toàn bộ nội dung
            summaryText.classList.remove('line-clamp-3');
            summaryText.textContent = fullText;
        } else {
            // Thu gọn nội dung
            summaryText.classList.add('line-clamp-3');
            summaryText.textContent = fullText;
        }
    }


</script>