@using Dynamics.Utility
@model List<Dynamics.Models.Dto.RequestOverviewDto>

@{
    ViewData["Title"] = "My Request";
    User currentUser = Accessor.HttpContext.Session.GetCurrentUser();
    if (currentUser != null) ViewBag.userID = currentUser.Id;
}
<body>
<main class="w-full h-full flex flex-col gap-6 items-center p-16" style="min-height: calc(100vh - 144px - 72px)">
    <a asp-action="Create" asp-controller="Request" class="my-5">
        <button id="createOrgBtn" class="btn btn-wide btn-primary text-white">
            Create new request
        </button>
    </a>
    <h1 class="text-3xl font-bold">Manage your requests</h1>
    <!-- search bar -->
    <div class="flex justify-end w-full mb-8">
        <div class="input input-bordered flex items-center gap-2 bg-white">
            <svg xmlns="http://www.w3.org/2000/svg"
                 viewBox="0 0 16 16"
                 fill="currentColor"
                 class="h-4 w-4 opacity-70">
                <path fill-rule="evenodd"
                      d="M9.965 11.026a5 5 0 1 1 1.06-1.06l2.755 2.754a.75.75 0 1 1-1.06 1.06l-2.755-2.754ZM10.5 7a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Z"
                      clip-rule="evenodd"/>
            </svg>
            <input type="text" class="grow" placeholder="Search something..." name="Query" id="searchInp"/>
        </div>
    </div>
    @if (!Model.Any())
    {
        <h4>No request found!</h4>
    }
    else
    {
        <div class="flex justify-center w-full">
            <ul class="gap-4 flex justify-center flex-wrap container">
                @foreach (var item in Model)
                {
                    <partial name="CustomComponent/OverviewCard/RequestOverview" model="item" />
                }
            </ul>
        </div>

    }

    @* <div class="pagination mt-4 flex justify-center space-x-1.5"> *@
    @*     @if (ViewBag.currentPage > 1) *@
    @*     { *@
    @*         <a href="@Url.Action("MyRequest", new { pageNumber = ViewBag.currentPage - 1, pageSize = 12 })"> *@
    @*             <button class="btn bg-white text-black rounded-lg border-solid">Previous</button> *@
    @*         </a> *@
    @*     } *@
    @* *@
    @*     @for (int i = 1; i <= ViewBag.totalPages; i++) *@
    @*     { *@
    @*         <a href="@Url.Action("MyRequest", new { pageNumber = i, pageSize = 12 })" *@
    @*            class="@(ViewBag.currentPage == i ? "btn-primary" : "")"> *@
    @*             <button class="btn bg-white text-black rounded-lg border-solid">@i</button> *@
    @*         </a> *@
    @*     } *@
    @* *@
    @*     @if (ViewBag.currentPage < ViewBag.totalPages) *@
    @*     { *@
    @*         <a href="@Url.Action("MyRequest", new { pageNumber = ViewBag.currentPage + 1, pageSize = 12 })"> *@
    @*             <button class="btn bg-white text-black rounded-lg border-solid">Next</button> *@
    @*         </a> *@
    @*     } *@
    @* </div> *@
</main>
</body>
<partial name="CustomComponent/_SweetAlertToast"/>
<script>
    // First load all data from the card
    // An object should be like this: obj {content: abc, node: A node}
    let cards = document.getElementsByClassName('card');
    // console.log(cards);
    let allCardInformation = [];
    for (card of cards) {
        let cardSearchContents = card.querySelectorAll('.searchTarget');
        let searchContent = Array.from(cardSearchContents).reduce((acc, current) => acc + current.innerText + ' ', '');
        // console.log(cardSearchContents);
        // console.log(searchContent);
        allCardInformation.push({
            search: searchContent,
            ele: card,
        });
    }
    console.log(allCardInformation)
    let searchForm = document.getElementById('searchInp');
    searchForm.addEventListener('input', e => {
        const query = e.target.value.toLowerCase();
        allCardInformation.forEach(card => {
            console.log(card)
            let isVisible = card.search.toLowerCase().includes(query);
            card.ele.classList.toggle("hidden", !isVisible);
        })
    })
</script>
@* <script> *@
@*         function setFilter(filter) { *@
@*             document.getElementById("filterQuery").value = filter; *@
@*             document.getElementById("filterButton").innerHTML = filter; *@
@*         } *@
@*         // dropdown for date *@
@*         const dateButton = document.getElementById('dateButton'); *@
@*         const dateDropdown = document.getElementById('dateDropdown'); *@
@* *@
@*         dateButton.addEventListener('click', () => { *@
@*             dateDropdown.classList.toggle('hidden'); *@
@*         }); *@
@* *@
@*         // Close the dropdown if clicked outside *@
@*         window.addEventListener('click', function(e) { *@
@*             if (!dateButton.contains(e.target) && !dateDropdown.contains(e.target)) { *@
@*                 dateDropdown.classList.add('hidden'); *@
@*             } *@
@*         }); *@
@* </script> *@
