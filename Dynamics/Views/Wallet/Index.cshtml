@using Dynamics.Utility
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.IdentityModel.Tokens
@model Dynamics.Models.Models.ViewModel.UserWalletVM
@{
    ViewData["Title"] = "Wallet";
    Layout = "CustomLayout/_LayoutWithNavbarOnly";
    var count = ((Model.PaginationRequestDto.PageNumber - 1) * Model.PaginationRequestDto.PageSize) + 1;
}

<main class="flex md:p-6 pb-0 flex-1 min-h-screen">
    @await Html.PartialAsync("CustomComponent/_UserSidebar", "Wallet")
    <div class="divider divider-horizontal"></div>
    <div class="w-full max-w-screen-xl mx-auto p-4">
        <div class="flex flex-col gap-6 p-6">
            <div>
                <h1 class="text-3xl font-bold">Wallet</h1>
                <h3 class="text-neutral">Manage your <b>digital</b> Dynamics wallet</h3>
            </div>

            @* User current coin section *@
            <section class="flex justify-between items-center p-6 shadow-lg rounded-lg bg-success text-white">
                <div>
                    <p class="text-xl">Current balance: </p>
                    <p class="flex items-center gap-2 text-lg font-bold">
                        <span id="moneyDisplay">@Model.Wallet.Amount</span> VND
                    </p>
                </div>
                <button class="btn btn-primary rounded-md shadow-md text-white" onclick="document.getElementById('rechargeModal').showModal()">
                    <svg class="w-6 h-6" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 24 24">
                        <path fill-rule="evenodd" d="M12 14a3 3 0 0 1 3-3h4a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2h-4a3 3 0 0 1-3-3Zm3-1a1 1 0 1 0 0 2h4v-2h-4Z" clip-rule="evenodd"/>
                        <path fill-rule="evenodd" d="M12.293 3.293a1 1 0 0 1 1.414 0L16.414 6h-2.828l-1.293-1.293a1 1 0 0 1 0-1.414ZM12.414 6 9.707 3.293a1 1 0 0 0-1.414 0L5.586 6h6.828ZM4.586 7l-.056.055A2 2 0 0 0 3 9v10a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2h-4a5 5 0 0 1 0-10h4a2 2 0 0 0-1.53-1.945L17.414 7H4.586Z" clip-rule="evenodd"/>
                    </svg>
                    Top up wallet
                </button>
                <dialog id="rechargeModal" class="modal">
                    <div class="modal-box text-black">
                        <form method="dialog">
                            <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">✕</button>
                        </form>
                        <h3 class="text-lg font-bold">Recharge money to Dynamics wallet</h3>
                        <div class="py-4">
                            <p>Enter the amount of money you desire (Minimum of 10000)</p>
                            <i class="text-neutral text-sm mb-4 block">1000 Dynamics currency equals 1000 VND</i>
                            <form method="post" id="confirmPayment" asp-action="TopUp">
                                <div class="join w-full">
                                    <input type="number" min="10000" max="20000000" placeholder="Enter your amount"
                                           class="input input-bordered join-item" style="width: 70%" name="amount"/>
                                    <div class="join-item cursor-none bg-neutral btn btn-disabled" style="width: 30%">
                                        .VND
                                    </div>
                                </div>
                                <span class="text-success" id="newBalance"></span>
                                <span class="text-error"></span>
                            </form>
                        </div>
                        <div class="modal-action">
                            <button class="btn btn-primary" id="cfmBtn">Confirm payment</button>
                            <form method="dialog">
                                <!-- if there is a button in form, it will close the modal -->
                                <button class="btn">Close</button>
                            </form>
                        </div>
                    </div>
                </dialog>
            </section>
            @* User coin transaction history *@
            <section class="py-8 w-full">
                <div class="w-full">
                    <h1 class="text-3xl font-bold text-start">Your wallet history</h1>
                    <h2 class="text-neutral text-start">View your wallet activities</h2>
                </div>
                <!-- Left search bar -->
                <form class="flex w-full justify-start items-center gap-2 my-4" id="searchForm" method="get" asp-action="Index">
                    @* Hidden pagination inputs so that when a filter and pagination go along together, the  *@
                    <input type="hidden" value="@Model.PaginationRequestDto.PageNumber" name="PageNumber"/>
                    <input type="hidden" value="@Model.PaginationRequestDto.PageSize" name="PageSize"/>
                    <input type="hidden" value="@Model.PaginationRequestDto.TotalPages" name="TotalPage"/>
                    <input type="hidden" value="@Model.PaginationRequestDto.TotalRecords" name="TotalRecords"/>
                    @* Search bar *@
                    <div class="join">
                        <div>
                            <div>
                                <div class="input input-bordered flex items-center gap-2 rounded-r-none bg-white">
                                    <svg xmlns="http://www.w3.org/2000/svg"
                                         viewBox="0 0 16 16"
                                         fill="currentColor"
                                         class="h-4 w-4 opacity-70">
                                        <path fill-rule="evenodd"
                                              d="M9.965 11.026a5 5 0 1 1 1.06-1.06l2.755 2.754a.75.75 0 1 1-1.06 1.06l-2.755-2.754ZM10.5 7a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Z"
                                              clip-rule="evenodd"/>
                                    </svg>
                                    <input type="text" class="grow" placeholder="Search something..." name="Query" value="@Model.SearchRequestDto.Query"/>
                                </div>
                            </div>
                        </div>
                        <select class="select select-bordered join-item bg-white" name="Filter">
                            @{
                                // Check if user already has filter before
                                bool isFilteredBefore = !string.IsNullOrEmpty(Model.SearchRequestDto.Filter);
                                foreach (var filterOptions in Model.FilterOptions)
                                {
                                    if (filterOptions.Key.Equals(SearchOptionsConstants.Filter, StringComparison.OrdinalIgnoreCase))
                                    {
                                        // If there is no selected filter before, we make the Filter option selected and disabled
                                        if (!isFilteredBefore)
                                        {
                                            <option value="@filterOptions.Value" selected disabled>@filterOptions.Key</option>
                                        }
                                        else
                                        {
                                            <option value="@filterOptions.Value" disabled>@filterOptions.Key</option>
                                        }
                                    }
                                    else
                                    {
                                        // If a filter exist, select that filter automatically
                                        if (isFilteredBefore && filterOptions.Value.Equals(Model.SearchRequestDto.Filter, StringComparison.OrdinalIgnoreCase))
                                        {
                                            <option value="@filterOptions.Value" selected>@filterOptions.Key</option>
                                        }
                                        else
                                        {
                                            <option value="@filterOptions.Value"> @filterOptions.Key</option>
                                        }
                                    }
                                }
                            }
                        </select>
                        <input name="DateFrom" type="date" placeholder="From date" class="input input-bordered join-item bg-white"
                               max="@DateTime.Now.ToString("yyyy-MM-dd")" value="@(Model.SearchRequestDto.DateFrom.HasValue ? Model.SearchRequestDto.DateFrom.Value.ToString("yyyy-MM-dd") : "")"/>
                        <input name="DateTo" type="date" placeholder="To date" class="input input-bordered join-item bg-white rounded-md"
                               max="@DateTime.Now.ToString("yyyy-MM-dd")" value="@(Model.SearchRequestDto.DateTo.HasValue ? Model.SearchRequestDto.DateTo.Value.ToString("yyyy-MM-dd") : "")"/>
                    </div>
                    <button class="btn btn-primary">Search</button>
                </form>
                <!-- End right search bar -->
                <!-- List of activity -->
                <ul class="flex flex-col gap-2 w-full">
                    <!-- An activity -->
                    @{
                        if (Model.UserWalletTransactionsVM.IsNullOrEmpty())
                        {
                            <h3 class="font-bold text-center text-2xl">No information available.</h3>
                        }
                        else
                        {
                            <div class="overflow-x-auto">
                                <table class="table table-md">
                                    <thead class="bg-gray-300/20">
                                    <tr class="text-xl text-gray-900">
                                        <th>#</th >
                                        <th> Date </th >
                                        <th> Message </th >
                                        <th> Amount </th >
                                        <th> Type </th >
                                    </tr >
                                    </thead >
                                    <tbody >
                                    @{
                                        foreach (var transaction in Model.UserWalletTransactionsVM)
                                        {
                                            <tr class="hover:bg-slate-50 border-b border-slate-200">
                                                <!-- User date | Message | Target | resource | type -->
                                                <th>@count</th>
                                                <td>
                                                    <p>@Html.DisplayFor(m => transaction.Time)</p>
                                                </td>
                                                <td>
                                                    <p>
                                                        @(transaction.Message ?? "No message")
                                                    </p>
                                                </td>
                                                <td>
                                                    <p>
                                                        @transaction.Amount.ToString("N0")
                                                    </p>
                                                </td>
                                                <td>
                                                    <!-- Type of donation -->
                                                    @if (transaction.TransactionType.Equals(TransactionConstants.TopUp, StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        <p class="badge badge-success min-w-24">Top up</p>
                                                    }
                                                    else if (transaction.TransactionType.Equals(TransactionConstants.Refund, StringComparison.OrdinalIgnoreCase))
                                                    {
                                                        <p class="badge badge-primary min-w-24">Refund</p>
                                                    }
                                                    else
                                                    {
                                                        <p class="badge badge-warning min-w-24">Donate</p>
                                                    }
                                                </td>
                                            </tr>
                                            count += 1;
                                        }
                                    }
                                    </tbody>
                                </table >
                            </div>
                        }
                    }
                    <partial name="CustomComponent/_PaginationFooter" model="@Model.PaginationRequestDto"/>
                </ul>
            </section>
        </div>
    </div>
</main>
<partial name="CustomComponent/_SweetAlert"/>
<partial name="_ValidationDatePartial"/>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        let moneyDisplay = document.getElementById('moneyDisplay');
        let amount = parseInt(moneyDisplay.innerText);
        moneyDisplay.innerText = amount.toLocaleString(); // Format to locale string
    });
    
    let confirmPaymentForm = document.getElementById('confirmPayment');
    let paymentInput = confirmPaymentForm.querySelector('input');
    let validationSpan = confirmPaymentForm.querySelector('span');
    let cfmButton = document.getElementById('cfmBtn');
    let newBalance = document.getElementById('newBalance');
    paymentInput.addEventListener('input', (e) => {
        let addedBalance = parseInt(paymentInput.value); // convert to a number
        let currentBalance = parseInt(@Model.Wallet.Amount); // convert to a number
        validationSpan.classList.add('text-success');
        // Clear display if input is empty
        if (paymentInput.value === "" || paymentInput.value === null) {
            newBalance.innerHTML = "";
            return;
        }
        newBalance.innerHTML = `New balance: ${(addedBalance + currentBalance).toLocaleString()} VND`;
    })
    cfmButton.addEventListener('click', (e) => {
        if (paymentInput.value < 10000) {
            validationSpan.classList.add('text-error');
            validationSpan.classList.remove('text-success');
            validationSpan.innerText = "Money amount must be at least 10,000 VND";
            e.preventDefault();
        } else if(paymentInput.value > 20000000) {
            validationSpan.classList.add('text-error');
            validationSpan.classList.remove('text-success');
            validationSpan.innerText = "Money amount must be less than 20,000,000 VND"
        } else {
            confirmPaymentForm.submit();
        }
    })
</script>