@using Dynamics.Utility
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Http.Extensions
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using Newtonsoft.Json
@inject IHttpContextAccessor Accessor
@inject IProjectMemberRepository ProjectMemberRepository
@inject IOrganizationRepository OrganizationRepository
@inject IUserRepository UserRepository
@model Dynamics.Models.Models.ViewModel.SendDonateRequestVM

@{
    ViewData["Title"] = "Donation Page";
    Layout = "~/Views/Shared/_LayoutProject.cshtml";
    var currentProjectID = Accessor.HttpContext.Session.GetString("currentProjectID");
    var currentProjectLeaderID = Accessor.HttpContext.Session.GetString("currentProjectLeaderID");
    var userString = Accessor.HttpContext.Session.GetString("user");
    User currentUser = null;
    if (userString != null)
    {
        currentUser = JsonConvert.DeserializeObject<User>(userString);
    }
    var organizationUserLead = await OrganizationRepository.GetOrganizationUserLead(currentUser.Id);
    var ProjectMemberOfUser = ProjectMemberRepository.FilterProjectMember(p => p.ProjectID.Equals(new Guid(currentProjectID)) && p.UserID.Equals(currentUser.Id));
    var statusProjectMemberOfUser = ProjectMemberOfUser?.FirstOrDefault()?.Status;
    var leader = await UserRepository.GetAsync(x => x.Id == new Guid(currentProjectLeaderID));
}
<!-- Donate by money -->
<section class="md:px-32 my-16">
    <h2 class="text-center font-bold text-2xl mb-6">Donate by money</h2>
    <form asp-action="Pay" asp-controller="Payment" method="post" class="donateMoneyForm flex md:gap-32 gap-16">
        <input type="hidden" name="TargetType" value="@Model.VnPayRequestDto.TargetType"/>
        <input type="hidden" name="ResourceID" value="@Model.VnPayRequestDto.ResourceID"/>
        <input type="hidden" name="TargetId" value="@Model.VnPayRequestDto.TargetId"/>
        <input type="hidden" Name="FromID" value="@currentUser?.Id"/>
        <input type="hidden" name="returnUrl" value="@ViewBag.returnUrl" />
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <!-- Inputs -->
        @if (Model.TypeDonor.Equals("User"))
        {
            <div class="flex-1">
                <!-- Money amount -->
                <label Name="Amount" class="form-control w-full">
                    <span class="label label-text text-lg">Enter money amount (Unit here)</span>
                    <input Name="Amount" type="number"
                           placeholder="Enter money amount"
                           class="input input-bordered w-full" min="1"/>

                </label>
                <!-- Message (maybe limit them ?) -->
                <label Name="Message" class="form-control w-full">
                    <span class="label label-text text-lg">Leave a message (optional)</span>
                    <textarea Name="Message" placeholder="Enter message"
                              class="textarea textarea-bordered textarea-md w-full"></textarea>

                </label>
            </div>
        }
        @if (Model.TypeDonor.Equals("Organization"))
        {
            @* REMIND *@
            <div class="flex-1">
                <h2 class="w-full max-w-md font-semibold text-blue-600 text-lg"> You are donate as @(organizationUserLead != null ? organizationUserLead.OrganizationName : "Your Organization")</h2>
                <input type="hidden" Name="FromID"/>

                <!-- Money amount -->
                <label Name="Amount" class="form-control w-full">
                    <span class="label label-text text-lg">Enter money amount (Unit here)</span>
                    <input Name="Amount" type="number"
                           placeholder="Enter money Amount"
                           class="input input-bordered w-full" min="1"/>
                    <span class="text-gray-800 font-semibold">If the field is empty, the default amount is 1</span>
                </label>
                <!-- Message (maybe limit them ?) -->
                <label Name="Message" class="form-control w-full">
                    <span class="label label-text text-lg">Leave a message (optional)</span>
                    <textarea Name="Message" placeholder="Enter message"
                              class="textarea textarea-bordered textarea-md w-full "></textarea>

                </label>
            </div>
        }

        <!-- Buttons -->
        <div class="flex-1 flex flex-col gap-4 justify-center">
            <!-- Button for CEO -->
            <!--if userid is ceoid of a organization[check status of userid in organmember ==2], if yes show the button-->
            @*       @if (statusProjectMemberOfUser >= 2)
            {
                <div>
                    <a asp-action="SendDonateRequest" asp-route-projectid="@currentProjectID" asp-route-donor="Organization">
                        <button type="button" class="btn bg-blue-700 text-white w-full font-bold text-lg hover:bg-blue-800">
                            Donate with organization
                        </button>
                    </a>
                    <p class="text-center text-gray-700">
                        Donate as CEO to show your organization's support
                    </p>
                </div>
            }      *@
            <!-- Other button -->
            <button type="submit" class="btn btn-success bg-blue-700 text-white w-full font-bold text-lg outline-none border-0">Confirm payment</button>
            <a asp-action="ManageProject" asp-route-id="@currentProjectID">
                <button type="button" class="btn bg-base-200 hover:bg-base-300 font-bold text-lg">
                    Back to project &larr;
                </button>
            </a>
        </div>
    </form>
</section>

<!-- ----------------------------------------------------------------------------Donate by resource ----------------------------------------->
<section class="md:px-32 mb-16">
    <h2 class="text-center font-bold text-2xl mb-6">Donate by resource</h2>
    <!-- upload excel file-->
    <div class="flex gap-x-6 justify-center">
        <div>
            <a asp-action="ExportProjectExcel" asp-controller="ExcelExport">
                <button type="submit" class="btn btn-primary">Export Excel</button>
            </a>
        </div>
        <div>
            <form id="donateResourceByImport" asp-action="UploadProjectExcel" asp-controller="ExcelReader" enctype="multipart/form-data">
                <div class="flex gap-x-6">
                    <label class="form-control">
                        <input id="file-upload" type="file" name="file" class="file-input file-input-bordered w-full max-w-xs">
                        <div id="notificationExcelMessageFirst" class="text-red-500 text-sm font-semibold" style="display:none;"></div>
                    </label>
                    <div class="flex flex-col">
                        <div class="flex justify-start items-center">
                            <input multiple asp-for="@Model.UserDonate.Attachments" type="file" name="images" id="AttachmentFirst" style="display:none;" />
                            <button id="button" type="button" class="w-fit h-10 px-4 rounded-md  inline-flex items-center justify-center
                                p-0.5 mb-2 me-2 overflow-hidden text-sm font-medium text-white bg-blue-800" onclick="thisFileUploadFirst();"
                                    title="These images are used to help the project leader make sure you have actually sent the donation..">
                                Upload proof images
                            </button>
                        </div>
                        <!-- Image file name will be shown here -->
                        <span id="fileNameFirst" class="text-gray-600 text-sm mt-2"></span>
                        <span id="notificationImgMessageFirst" class="text-red-500 text-sm font-semibold" style="display:none;"></span>
                    </div>
                    <button type="submit"
                            class="items-start text-md text-white bg-green-500 hover:bg-green-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-bold rounded-lg w-full sm:w-auto px-6 py-2.5 text-center">
                        Confirm
                    </button>
                </div>

            </form>
        </div>
    </div>
    <span class=" flex justify-center label label-text text-">If you donate multiple resources at once, download the excel and enter it into the web.</span>

    <!-- Step 1 -->
    <form enctype="multipart/form-data" method="post" id="donateResourceForm" asp-action="SendDonateRequest" class=" flex flex-col justify-center items-center gap-4 mb-8">
        <h3 class="text-center font-bold text-xl">1. Register a donation request</h3>
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <input type="hidden" asp-for="@Model.ProjectID" value="@currentProjectID"/>
        @if (Model.TypeDonor.Equals("User"))
        {
            <input type="hidden" asp-for="@Model.UserDonate.UserID" value="@currentUser?.Id"/>
            <input type="hidden" asp-for="@Model.TypeDonor" value="User"/>
            <div class="form-control w-full max-w-md">
                <label asp-for="@Model.UserDonate.ProjectResourceID" class="block mb-2 text-lg font-medium text-gray-900">Select a resource </label>
                <select asp-for="@Model.UserDonate.ProjectResourceID"
                        class="bg-white border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
                        asp-items="@(ViewData["ResourceTypeList"] as ICollection<SelectListItem>)">
                    <option required disabled selected>---Select Resource Type---</option>
                </select>
                <span asp-validation-for="@Model.UserDonate.ProjectResourceID" class="text-danger text-red-500 text-sm font-semibold"></span>
            </div>

            <!-- Enter amount -->
            <label asp-for="@Model.UserDonate.Amount" class="form-control w-full max-w-md">
                <span class="label label-text text-lg font-medium">Enter amount</span>
                <input id="Amount" asp-for="@Model.UserDonate.Amount" type="number" placeholder="Enter amount" class="input input-bordered" min="1"/>
                <span asp-validation-for="@Model.UserDonate.Amount" class="text-danger text-red-500 text-sm font-semibold"></span>
        </label>
            <label asp-for="@Model.UserDonate.Message" class="form-control w-full max-w-md">
                <span class="label label-text text-lg">Leave a message (optional)</span>
                <textarea asp-for="@Model.UserDonate.Message" placeholder="Enter message"
                          class="textarea textarea-bordered textarea-md w-full"></textarea>             
            </label>
            <div class="flex flex-col mt-4 form-control w-full max-w-md">
                <div class="flex justify-start items-center">
                    <label asp-for="@Model.UserDonate.Attachments" class="block mb-2 text-md font-medium text-gray-900 pr-4">Upload proof images</label>
                    <input multiple asp-for="@Model.UserDonate.Attachments" type="file" name="images" id="AttachmentSecond" style="display:none;" />
                    <button id="button" type="button" class="w-fit h-10 px-4 rounded-md inline-flex items-center justify-center
                    p-0.5 mb-2 me-2 overflow-hidden text-sm font-medium text-white bg-blue-800" onclick="thisFileUploadSecond();"
                            title="These images are used to help the project leader make sure you have actually sent the donation.">
                        Choose images
                    </button>
                </div>
                <!-- Image file name will be shown here -->
                <span id="fileNameSecond" class="text-gray-600 text-sm mt-2" style="display:none;"></span>
                <span id="notificationImgMessageSecond" class="text-red-500 text-sm font-semibold" style="display:none;"></span>
            </div>
        }
        <button type="submit" class="btn btn-primary bg-blue-700 text-white font-bold">Confirm</button>
    </form>

    <!-- Step 2 -->
    <div class="flex flex-col justify-center items-center gap-4 mb-8">
        <h3 class="text-center font-bold text-xl">
            2. Contact with the leader of the project to discuss further
        </h3>
        <div>
            <!-- If you already have this script at layout, you won't need it here. It is for displaying the icons -->
            <script src="https://kit.fontawesome.com/ba8c3661b4.js"
                    crossorigin="anonymous"></script>
            <p>
                <i class="fa-solid fa-at"></i> @leader.Email
            </p>
            <p>
                <i class="fa-solid fa-phone"></i> @leader.PhoneNumber
            </p>
            <p>
                <i class="fa-solid fa-location-dot"></i> @leader.UserAddress
            </p>
        </div>
    </div>
    <!-- Step 3 -->
    <!-- Either show user a button to redirect to user history page or just use the table below -->
    <div class="flex flex-col justify-center items-center gap-4">
        <h3 class="text-center font-bold text-xl">3. Keep track of your donation at ...</h3>
        <!-- Table -->
        <div class="overflow-x-auto">
            <table class="table">
                <thead>
                <tr>
                    <th></th>
                    <th>Name</th>
                    <th>Quantity</th>
                    <th>Status</th>
                </tr>
                </thead>
                <tbody>
          @if (Model.TypeDonor.Equals("User"))
        {
            for(int i = 0; i < Model.UserTransactionHistory?.Count();i++){
                var item  = Model.UserTransactionHistory.ElementAt(i);
                            <tr>
                                <th>@(i+1)</th>
                                <td>@item.ProjectResource?.ResourceName</td>
                                <td>@item.Amount</td>
                                <td>
                                    @if (item.Status == 1)
                                    {
                                        <div class="badge badge-success min-w-24">Accepted</div>
                                    }
                                    else{
                                         <div class="badge badge-error min-w-24">Pending</div>
                                        }
                                </td>
                            </tr>
                        }
                        <!-- row 1 -->
                    }
                </tbody>
            </table>
        </div>
        <!-- End table -->
        <button class="btn btn-primary">Click me</button>
    </div>
</section>
<script>
    //-------------upload images for import file---------------
    function thisFileUploadFirst() {
        document.getElementById("AttachmentFirst").click();
    };
    const maxFiles = 4;
    // Event listener to update the file name after the file is selected
    document.getElementById("AttachmentFirst").addEventListener('change', function () {
        const attachmentInput = document.getElementById("AttachmentFirst");
        const notificationMessage = document.getElementById("notificationImgMessageFirst");
        const fileNameDisplay = document.getElementById("fileNameFirst");

        if (attachmentInput.files.length > 0) {
            // Check if the number of selected files exceeds the limit
            if (attachmentInput.files.length > maxFiles) {
                notificationMessage.innerText = "You can only upload a maximum of " + maxFiles + " files.";
                notificationMessage.style.display = "block";
                attachmentInput.value = '';  // Reset the input if the file limit is exceeded
                fileNameDisplay.innerText = '';  // Clear displayed file names
            } else {
                notificationMessage.style.display = "none";
                // Display the names of selected files
                const fileNames = Array.from(attachmentInput.files).map(file => file.name);
                fileNameDisplay.innerText = fileNames.join(', ');
            }
        }
    });

    document.querySelector('#donateResourceByImport').addEventListener('submit', function (event) {
        const attachmentInput = document.getElementById("AttachmentFirst");
        const notificationMessage = document.getElementById("notificationImgMessageFirst");
        const excelfileInput = document.getElementById("file-upload");
        const notificationExcelMessage = document.getElementById("notificationExcelMessageFirst");

        if (attachmentInput.files.length === 0) {
            event.preventDefault();  // Prevent form submission if no file is selected
            notificationMessage.innerText = "Please upload at least one proof image.";
            notificationMessage.style.display = "block";
        } else {
            notificationMessage.style.display = "none";  // Hide the message if files are selected
        }
        if (excelfileInput.files.length === 0) {
            event.preventDefault();  // Prevent form submission if no file is selected
            notificationExcelMessage.innerText = "An excel file must be uploaded.";
            notificationExcelMessage.style.display = "block";
        } else {
            notificationExcelMessage.style.display = "none";  // Hide the message if files are selected
        }
    });
    //-----------------------upload image for one resource---------------
    function thisFileUploadSecond() {
        document.getElementById("AttachmentSecond").click();
    };

    // Event listener to update the file name after the file is selected
    document.getElementById("AttachmentSecond").addEventListener('change', function () {
        const attachmentInput = document.getElementById("AttachmentSecond");
        const notificationMessage = document.getElementById("notificationImgMessageSecond");
        const fileNameDisplay = document.getElementById("fileNameSecond");

        if (attachmentInput.files.length > 0) {
            // Check if the number of selected files exceeds the limit
            if (attachmentInput.files.length > maxFiles) {
                notificationMessage.innerText = "You can only upload a maximum of " + maxFiles+ " files.";
                notificationMessage.style.display = "block";
                attachmentInput.value = '';  // Reset the input if the file limit is exceeded
                fileNameDisplay.innerText = '';  // Clear displayed file names
            } else {
                notificationMessage.style.display = "none";
                // Display the names of selected files
                const fileNames = Array.from(attachmentInput.files).map(file => file.name);
                fileNameDisplay.innerText = fileNames.join(', ');
                fileNameDisplay.style.display = "block";
            }
        }
    });

    //---------------sweetalert for donate---------------------
    document.querySelector('#donateResourceForm').addEventListener('submit', function (event) {
        event.preventDefault(); // Prevent default form submission behavior

        const attachmentInput = document.getElementById("AttachmentSecond");
        const notificationMessage = document.getElementById("notificationImgMessageSecond");

        // Clear previous messages
        notificationMessage.style.display = "none";

        let isValid = true;

        // Check if the file is uploaded
        if (attachmentInput.files.length === 0) {
            notificationMessage.innerText = "Please upload at least one proof image.";
            notificationMessage.style.display = "block";
            isValid = false;
        }

        if (!isValid) {
            return; // Exit if form is not valid
        }

        var form = this; // Reference to the form

        if ($(form).valid()) {  // Assuming jQuery validation is used

            const swalWithTailwind = Swal.mixin({
                customClass: {
                    confirmButton: "bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded",
                    cancelButton: "bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded mr-4"
                },
                buttonsStyling: false
            });

            swalWithTailwind.fire({
                title: "Are you sure?",
                text: "You won't be able to revert this!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "Yes, I confirm!",
                cancelButtonText: "No, cancel!",
                reverseButtons: true
            }).then(result => {
                if (result.isConfirmed) {
                    const formData = new FormData(form);

                    fetch(form.action, {
                        method: 'POST',
                        body: formData
                    })
                        .then(response => response.json()) // Parse response as JSON
                        .then(data => {
                            if (data.success) {
                                swalWithTailwind.fire({
                                    title: "Donate successful!",
                                    html: `<p>${data.message}</p><p>Thank you for your contribution!</p>`,
                                    icon: "success"
                                }).then(() => {
                                    window.location.reload(); // Reload the page on success
                                });
                            } else {
                                swalWithTailwind.fire({
                                    title: "Failed to donate!",
                                    text: data.message,
                                    icon: "error"
                                });
                            }
                        })
                        .catch(error => {
                            swalWithTailwind.fire({
                                title: "Error",
                                text: "An error occurred while processing your request: " + error,
                                icon: "error"
                            });
                        });
                } else if (result.dismiss === Swal.DismissReason.cancel) {
                    swalWithTailwind.fire({
                        title: "Cancelled",
                        text: "Your donation request was canceled.",
                        icon: "error"
                    });
                }
            });
        }
    });


</script>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>